<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"
	default-lazy-init="true">

    <!-- Jdbc单数据源事务管理器 -->
    <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
        id="jdbcTransactionManager" p:dataSource-ref="dataSource"/>

    <!-- spring jdbc template  -->
    <bean class="org.springframework.jdbc.support.nativejdbc.CommonsDbcpNativeJdbcExtractor"
    	id="jdbcExtractor" lazy-init="true"/>
    <bean class="org.springframework.jdbc.support.lob.DefaultLobHandler"
    	id="lobHandler" lazy-init="true"/>
    <bean id="DBRepository" class="com.wxcommon.repository.SpringDao" p:lobHandler-ref="lobHandler"
        p:dbType="mysql" p:nativeJdbcExtractor-ref="jdbcExtractor" p:dataSource-ref="dataSource"/>
    <bean id="WXDBRepository" class="com.wxcommon.repository.SpringDao" p:lobHandler-ref="lobHandler"
          p:dbType="mysql" p:nativeJdbcExtractor-ref="jdbcExtractor" p:dataSource-ref="wxDataSource"/>

    <!-- MyBatis使用Spring自带的事务管理器 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:conf/mybatis.xml"/>
        <property name="dataSource" ref="dataSource"/>
        <!-- 显式指定Mapper文件位置 -->
        <property name="mapperLocations" value="classpath:mybatis/*Mapper.xml"/>
    </bean>

    <!-- 扫描basePackage下所有以annotationClass标注的接口，另外一种方式是扫描实现markerInterface接口的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="annotationClass" value="com.wxcommon.mybatis.MyBatisRepository"/>
        <property name="basePackage" value="com.hxq.mobile.**.dao,com.hxq.mobile.doctor.*.mapper,com.hxq.mobile.common.mapper"/>
    </bean>

    <!-- 配置事务传播特性  -->
    <tx:advice id="jdbcTxAdvice" transaction-manager="jdbcTransactionManager">
        <tx:attributes>
            <!-- select 开头的方法,开启只读,提高数据库访问性能 -->
            <tx:method name="select*" propagation="REQUIRED" read-only="true"/>
             <!-- 对insert,update,delete 开头的方法进行事务管理,只要有异常就回滚 -->
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
        </tx:attributes>
    </tx:advice>

	<aop:config>
		<!-- 配置参与jdbc事务的类 -->
		<aop:pointcut id="jdbcServiceMethod"
			expression="(execution(public * com.hxq.mobile..service.*Service.*(..)))
 			and !execution(* get*(..)) and !execution(* set*(..))"/>

		<!-- advisor：用来定义只有一个通知和一个切入点的切面 -->
		<aop:advisor advice-ref="jdbcTxAdvice" pointcut-ref="jdbcServiceMethod" order="1"/>
	</aop:config>
</beans>