package com.aebiz.b2b2c.servicestaff.servicestaffinfo.dao;import java.util.ArrayList;import java.util.List;import org.hibernate.Query;import org.springframework.stereotype.Repository;import com.aebiz.b2b2c.baseframework.basecrud.dao.BaseH4Impl;import com.aebiz.b2b2c.baseframework.utils.StringUtil;import com.aebiz.b2b2c.servicestaff.servicestaffinfo.vo.ServicestaffinfoModel;import com.aebiz.b2b2c.servicestaff.servicestaffinfo.vo.ServicestaffinfoQueryModel;@Repositorypublic class ServicestaffinfoH4Impl extends		BaseH4Impl<ServicestaffinfoModel, ServicestaffinfoQueryModel> implements		ServicestaffinfoDAO {	/**	 * 通过家政员编号获取家政员性别	 * 	 * @param uuid	 * @return	 */	public String getServiceStaffinfoSex(String uuid) {		StringBuffer hql = new StringBuffer(				"from ServicestaffinfoModel where serviceStaffUuid=:uuid");		Query query = this.getH4Session().createQuery(hql.toString());		query.setString("uuid", uuid);		if (query.list() != null && query.list().size() > 0) {			ServicestaffinfoModel model = (ServicestaffinfoModel) query.list()					.get(0);			return model.getSex();		}		return "";	}	/**	 * 通过家政员编号获取家政员姓名	 * 	 * @param uuid	 * @return	 */	/*	 * public String getServiceStaffinfoRealName(String uuid) { StringBuffer hql	 * = new StringBuffer(	 * "from ServicestaffinfoModel where serviceStaffUuid=:uuid");	 * 	 * Query query = this.getH4Session().createQuery(hql.toString());	 * query.setString("uuid", uuid); if (query.list() != null &&	 * query.list().size() > 0) { ServicestaffinfoModel model =	 * (ServicestaffinfoModel) query.list() .get(0); return model.getRealName();	 * }	 * 	 * return ""; }	 */	/**	 * 通过家政员编号获取家政员身份证号	 * 	 * @param uuid	 * @return	 */	public String getServiceStaffinfoCertCode(String uuid) {		StringBuffer hql = new StringBuffer(				"from ServicestaffinfoModel where serviceStaffUuid=:uuid");		Query query = this.getH4Session().createQuery(hql.toString());		query.setString("uuid", uuid);		if (query.list() != null && query.list().size() > 0) {			ServicestaffinfoModel model = (ServicestaffinfoModel) query.list()					.get(0);			return model.getCertCode();		}		return "";	}	/**	 * 通过家政员编号获取家政员岗位	 * 	 * @param uuid	 * @return	 */	public String getServiceStaffinfoIndustry(String uuid) {		StringBuffer hql = new StringBuffer(				"select serviceStaffJob from ServicestaffinfoModel where serviceStaffUuid=:uuid");		Query query = this.getH4Session().createQuery(hql.toString());		query.setString("uuid", uuid);		if (query.list() != null && query.list().size() > 0) {			return (String) query.list().get(0);		}		return "";	}	/**	 * 根据传入的用户名判断该用户名是否已经存在	 * 	 * @param serviceStaffName	 *            服务人员用户名	 * @return	 */	public boolean checkServiceStaffinfoCertCode(String certCode) {		StringBuffer hql = new StringBuffer(				" from ServicestaffinfoModel where certCode=:certCode");		Query query = this.getH4Session().createQuery(hql.toString());		query.setString("certCode", certCode);		List<ServicestaffinfoModel> list = query.list();		if (list != null && list.size() > 0) {			return true;		}		return false;	}	/**	 * 根据家政员编号号获取会员基础信息	 */	public ServicestaffinfoModel getServicestaffinfoModelByServicestaffUuid(			String servicestaffUuid) {		StringBuffer hql = new StringBuffer(				" from ServicestaffinfoModel where serviceStaffUuid=:servicestaffUuid");		Query query = this.getH4Session().createQuery(hql.toString());		query.setString("servicestaffUuid", servicestaffUuid);		List<ServicestaffinfoModel> list = query.list();		if (list.size() > 0) {			return (ServicestaffinfoModel) list.get(0);		} else {			return null;		}	}	/**	 * 通过城市id获取此城市的家政员列表	 * 	 * @param cityUuid	 * @return	 */	public List<ServicestaffinfoModel> getServiceStaffinfoListByCityUuid(			String cityUuid) {		StringBuffer hql = new StringBuffer(				" from ServicestaffinfoModel ssim where ssim.city=:city");		Query query = this.getH4Session().createQuery(hql.toString());		query.setString("city", cityUuid);		List<ServicestaffinfoModel> list = query.list();		if (list != null && list.size() > 0) {			return list;		} else {			return new ArrayList<ServicestaffinfoModel>();		}	}	/**	 * 通过医生分类id获取该医生分类下是否有医生	 * 	 * @param checkIds	 * @return 1 存在 ； 0不存在	 */	@Override	public String checkDoctorCategory(List<String> checkIds) {		for (int i = 0; i < checkIds.size(); i++) {			StringBuffer hql = new StringBuffer(					" select o.uuid  from ServicestaffinfoModel  as o ");			hql.append(" where o.doctorClassify =:doctorClassify ");			Query q = this.getH4Session().createQuery(hql.toString());			q.setString("doctorClassify", checkIds.get(i));			List list = q.list();			if (list != null && list.size() > 0) {				return "1";			}		}		return "0";	}	/**	 * 通过真实姓名查出医生列表	 * 	 * @param realName	 * @return	 */	@Override	public List<ServicestaffinfoModel> getServiceStaffinfoListByRealName(			String realName) {		StringBuffer hql = new StringBuffer(				" select ssim from ServicestaffinfoModel ssim where ssim.realName=:realName ");		Query query = this.getH4Session().createQuery(hql.toString());		query.setString("realName", realName);		List<ServicestaffinfoModel> list = query.list();		if (list != null && list.size() > 0) {			return list;		} else {			return new ArrayList<ServicestaffinfoModel>();		}	}	/**	 * 获取医生的擅长	 * 	 * @param customerUuid	 * @return	 */	@Override	public String getTerritory(String doctorUuid) {		if (StringUtil.isEmpty(doctorUuid)) {			return "";		}		StringBuffer hql = new StringBuffer(				" select o.territory from ServicestaffinfoModel as o where o.serviceStaffUuid =:doctorUuid ");		Query q = this.getH4Session().createQuery(hql.toString());		q.setString("doctorUuid", doctorUuid);		List list = q.list();		if (list != null && list.size() > 0) {			return (String) list.get(0);		}		return "";	}	@Override	public List<String> getServiceStaffinfoUuidListByRealName(String realName) {		StringBuffer hql = new StringBuffer(				" select ssim.uuid from ServicestaffinfoModel ssim where ssim.realName=:realName ");		Query query = this.getH4Session().createQuery(hql.toString());		query.setString("realName", realName);		List<String> uuids = query.list();		if (uuids != null && uuids.size() > 0) {			return uuids;		} else {			return new ArrayList<String>();		}	}}