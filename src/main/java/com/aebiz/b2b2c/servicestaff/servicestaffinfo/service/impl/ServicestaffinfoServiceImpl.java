package com.aebiz.b2b2c.servicestaff.servicestaffinfo.service.impl;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;import com.wxcommon.util.IdentityHelper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.multipart.MultipartFile;import com.aebiz.b2b2c.baseframework.basecrud.service.BaseServiceImpl;import com.aebiz.b2b2c.baseframework.basecrud.vo.BaseModel;import com.aebiz.b2b2c.baseframework.filemgr.helper.FileUploadHelper;import com.aebiz.b2b2c.baseframework.utils.DateFormatHelper;import com.aebiz.b2b2c.baseframework.utils.LoginUserHelper;import com.aebiz.b2b2c.baseframework.utils.StringUtil;import com.aebiz.b2b2c.baseframework.uuidservice.service.UuidService;import com.aebiz.b2b2c.servicestaff.servicestaffcomb.vo.ServicestaffcombModel;import com.aebiz.b2b2c.servicestaff.servicestaffinfo.dao.ServicestaffinfoDAO;import com.aebiz.b2b2c.servicestaff.servicestaffinfo.service.ServicestaffinfoService;import com.aebiz.b2b2c.servicestaff.servicestaffinfo.vo.ServicestaffinfoModel;import com.aebiz.b2b2c.servicestaff.servicestaffinfo.vo.ServicestaffinfoQueryModel;@Service@Transactionalpublic class ServicestaffinfoServiceImpl extends		BaseServiceImpl<ServicestaffinfoModel, ServicestaffinfoQueryModel>		implements ServicestaffinfoService {	private ServicestaffinfoDAO myDao = null;	@Autowired	private FileUploadHelper fileUpload = null;	@Autowired	private UuidService us;	@Autowired	public void setMyDao(ServicestaffinfoDAO dao) {		this.myDao = dao;		super.setDao(dao);	}	@Override	public String create(ServicestaffinfoModel m) {		m.setUuid(IdentityHelper.uuid2());		m.setDelFlag(BaseModel.DEL_FLAG_VALID);		m.setOper(LoginUserHelper.getLoginUserUuid());		m.setOpeTime(DateFormatHelper.getNowTimeStr());		String ret = super.create(m);		return ret;	}	@Override	public void update(ServicestaffinfoModel m) {		m.setDelFlag(BaseModel.DEL_FLAG_VALID);		m.setOper(LoginUserHelper.getLoginUserUuid());		m.setOpeTime(DateFormatHelper.getNowTimeStr());		super.update(m);	}	@Override	public void delete(ServicestaffinfoModel m) {		m.setDelFlag(BaseModel.DEL_FLAG_INVALID);		m.setOper(LoginUserHelper.getLoginUserUuid());		m.setOpeTime(DateFormatHelper.getNowTimeStr());		super.delete(m);	}	/**	 * 通过医生编号获取医生性别	 * 	 * @param uuid	 * @return	 */	public String getServiceStaffinfoSex(String uuid) {		return myDao.getServiceStaffinfoSex(uuid);	}	/**	 * 通过医生编号获取医生姓名	 * 	 * @param uuid	 * @return	 */	/*	 * public String getServiceStaffinfoRealName(String uuid) { return	 * myDao.getServiceStaffinfoRealName(uuid); }	 */	/**	 * 通过医生编号获取医生身份证号	 * 	 * @param uuid	 * @return	 */	public String getServiceStaffinfoCertCode(String uuid) {		return myDao.getServiceStaffinfoCertCode(uuid);	}	/**	 * 通过医生编号获取医生岗位	 * 	 * @param uuid	 * @return	 */	public String getServiceStaffinfoIndustry(String uuid) {		return myDao.getServiceStaffinfoIndustry(uuid);	}	/**	 * 根据传入的身份证判断身份证是否已经存在	 * 	 * @param serviceStaffName	 *            服务人员用户名	 * @return	 */	public boolean checkServiceStaffinfoCertCode(String certCode) {		return myDao.checkServiceStaffinfoCertCode(certCode);	}	/**	 * 根据医生编号号获取会员基础信息	 */	public ServicestaffinfoModel getServicestaffinfoModelByServicestaffUuid(			String servicestaffUuid) {		return myDao.getServicestaffinfoModelByServicestaffUuid(servicestaffUuid);	}	/**	 * 文件上传	 * 	 * @param customerShopLevelModel	 * @param files	 * @return	 */	public ServicestaffinfoModel uploadImage(ServicestaffinfoModel m,			MultipartFile[] files, MultipartFile[] imgFiles1) {		List<String> fileNameList = new ArrayList<String>();		List<MultipartFile> fileList = new ArrayList<MultipartFile>();		try {			if (files != null && files.length > 0) {				for (int i = 0; i < files.length; i++) {					String filePrefix = "shopLevelIcon"							+ new SimpleDateFormat("yyyyMMddHHmmss")									.format(new Date());					// 如果文件大小不为0					if (files[i].getSize() <= 0) {						continue;					}					String oldName = fileUpload.getFileName(files[i]);					String fileSuffix = this.getFileSuffix(oldName);					String newName = filePrefix + fileSuffix;					m.setImage(newName);					fileNameList.add(newName);					fileList.add(files[i]);				}			} else {				m.setImage("");			}			if (imgFiles1 != null && imgFiles1.length > 0) {				for (int i = 0; i < imgFiles1.length; i++) {					String filePrefix = "shopLevelIcon1"							+ new SimpleDateFormat("yyyyMMddHHmmss")									.format(new Date());					// 如果文件大小不为0					if (imgFiles1[i].getSize() <= 0) {						continue;					}					String oldName = fileUpload.getFileName(imgFiles1[i]);					String fileSuffix = this.getFileSuffix(oldName);					String newName = filePrefix + fileSuffix;					m.setCertImage(newName);					fileNameList.add(newName);					fileList.add(imgFiles1[i]);				}			} else {				m.setCertImage("");			}					} catch (Exception ex) {			m.setPhotoFive("");		}		if (fileList != null && fileList.size() > 0) {			MultipartFile[] newFiles = new MultipartFile[fileList.size()];			String[] newFileNames = new String[fileList.size()];			for (int i = 0; i < fileList.size(); i++) {				newFileNames[i] = fileNameList.get(i);				newFiles[i] = fileList.get(i);			}			fileUpload.uploadFiles(newFiles, newFileNames);		}		return m;	}	/**	 * 得到文件后缀	 * 	 * @param fileName	 *            文件名	 * @return	 */	public String getFileSuffix(String fileName) {		if (StringUtil.isEmpty(fileName)) {			return "";		}		return fileName.substring(fileName.indexOf("."), fileName.length());	}	/**	 * 更新医生员基础信息	 * 	 * @param customerModel	 */	public void updateServicestaffinfo(ServicestaffcombModel cus,			MultipartFile[] imgFiles, MultipartFile[] imgFiles1) {		ServicestaffinfoModel cim = cus.getServicestaffinfoModel();		if (!StringUtil.isEmpty(cim.getUuid())) {			this.uploadImage(cim, imgFiles, imgFiles1);			this.update(cim);		} else {			cim.setServiceStaffUuid(cus.getServicestaffModel().getUuid());			// 上传图片			this.uploadImage(cim, imgFiles, imgFiles1);			this.create(cim);		}	}	/**	 * 通过医生分类id获取该医生分类下是否有医生	 * 	 * @param checkIds	 * @return	 */	@Override	public boolean checkDoctorCategory(List<String> checkIds) {		String flag = myDao.checkDoctorCategory(checkIds);		if (flag.equals("1")) {			return true;		}		return false;	}	/**	 * 通过真实姓名查出医生列表	 * 	 * @param realName	 * @return	 */	public List<ServicestaffinfoModel> getServiceStaffinfoListByRealName(			String realName) {		return myDao.getServiceStaffinfoListByRealName(realName);	}	/**	 * 获取医生的擅长	 * 	 * @param customerUuid	 * @return	 */	@Override	public String getTerritory(String doctorUuid) {		return myDao.getTerritory(doctorUuid);	}	@Override	public void deleteReal(ServicestaffinfoModel servicestaffinfoModel) {		myDao.delete(servicestaffinfoModel);	}}