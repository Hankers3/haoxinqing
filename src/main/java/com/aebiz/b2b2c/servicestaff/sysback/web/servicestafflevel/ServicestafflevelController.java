package com.aebiz.b2b2c.servicestaff.sysback.web.servicestafflevel;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.multipart.MultipartFile;import com.aebiz.b2b2c.baseframework.basecrud.web.BaseController;import com.aebiz.b2b2c.baseframework.message.MessageHelper;import com.aebiz.b2b2c.baseframework.utils.StringUtil;import com.aebiz.b2b2c.servicestaff.servicestafflevel.service.ServicestafflevelService;import com.aebiz.b2b2c.servicestaff.servicestafflevel.vo.ServicestafflevelModel;import com.aebiz.b2b2c.servicestaff.servicestafflevel.vo.ServicestafflevelQueryModel;@Controller@RequestMapping("/sysback/servicestafflevel")public class ServicestafflevelController extends BaseController<ServicestafflevelModel,ServicestafflevelQueryModel>{	private ServicestafflevelService myService;	@Autowired	public void  setMyService(ServicestafflevelService bs){		this.myService = bs;		super.setBs(bs);	}	public ServicestafflevelController(){		super("/servicestaff/sysback/servicestafflevel","Servicestafflevel",ServicestafflevelController.class);	}			/**	 * 保存会员平台等级	 * 	 * @param m	 * @param request	 * @param files	 * @param model	 * @return	 */	@RequestMapping(value="/doadd", method = RequestMethod.POST)	public String save(			Model model,			@ModelAttribute("m") ServicestafflevelModel m,			HttpServletRequest request,			@RequestParam(value = "files", required = false) MultipartFile[] files			) {		// 校验前台数据			this.getMapErrorMsg().clear();			if (!checkAdd(model, m, request)) {				request.setAttribute("ShowMsgs", getMapErrorMsg());				return (String) request.getAttribute("ERROR_BACK_URL");			}		myService.uploadImage(m, files);				return super.add(model, m, request);	}		/**	 * 校验等级名称是否为空和长度	 * 	 * @param levelNameValue	 * @param minLength	 * @param maxLength	 */	public void checkLevelName(String levelNameValue, int minLength,			int maxLength) {		if (StringUtil.isEmpty(levelNameValue)) {			this.putErrorMsg("levelName", MessageHelper					.getMessage("servicestafflevel.levelName.empty"));		} else {			if (maxLength == 0 && minLength == 0) {				return;			}			if (levelNameValue.length() > maxLength) {				this.putErrorMsg(						"levelName",						MessageHelper								.getMessage("servicestafflevel.levelName.maxlength")								+ maxLength);			}			if (levelNameValue.length() < minLength) {				this.putErrorMsg(						"levelName",						MessageHelper								.getMessage("servicestafflevel.levelName.minlength")								+ minLength);			}		}	}			/**	 * 校验排序是否为空和长度	 * 	 * @param positionValue	 * @param minLength	 * @param maxLength	 */	public void checkPosition(String positionValue, int minLength, int maxLength) {		if (StringUtil.isEmpty(positionValue)) {			this.putErrorMsg("position", MessageHelper					.getMessage("servicestafflevel.position.empty"));		} else {			if (maxLength == 0 && minLength == 0) {				return;			}			if (positionValue.length() > maxLength) {				this.putErrorMsg(						"position",						MessageHelper								.getMessage("servicestafflevel.position.maxlength")								+ maxLength);			}			if (positionValue.length() < minLength) {				this.putErrorMsg(						"position",						MessageHelper								.getMessage("servicestafflevel.position.minlength")								+ minLength);			}		}	}				/**	 * 校验添加会员时候，输入的值是否合法	 */	@Override	protected boolean checkAdd(Model model, ServicestafflevelModel m,			HttpServletRequest request) {		/* 校验等级名称 */		checkLevelName(m.getLevelName(), 2, 20);		/* 校验排序 */		checkPosition(m.getPosition(), 1, 3);		// 跳转到页面，并将错误返回		if (this.getMapErrorMsg() != null && this.getMapErrorMsg().size() > 0) {			request.setAttribute(ERROR_BACK_URL,					"servicestaff/sysback/servicestafflevel/ServicestafflevelAdd");			return false;		}		return true;	}		/**	 * 校验修改会员时候，输入的值是否合法	 */	@Override	protected boolean checkUpdate(Model model, ServicestafflevelModel m,			HttpServletRequest request) {		/* 校验等级名称 */		checkLevelName(m.getLevelName(), 2, 20);		/* 校验排序 */		checkPosition(m.getPosition(), 1, 3);					// 跳转到页面，并将错误返回		if (this.getMapErrorMsg() != null && this.getMapErrorMsg().size() > 0) {			request.setAttribute(ERROR_BACK_URL,					"servicestaff/sysback/servicestafflevel/ServicestafflevelAdd");			return false;		}		return true;	}		/**	 * 根据传入的用户名判断该用户名是否已经存在	 * 	 * @param levelName	 * @param request	 * @param response	 * @return	 */	@RequestMapping(value = { "/checkLevelName" }, method = { RequestMethod.GET })	@ResponseBody	public String checkLevelNameExist(			@RequestParam("levelName") String levelName,			@RequestParam("uuid") String uuid, HttpServletRequest request,			HttpServletResponse response) {		if (myService.checkLevelNameExist(levelName, uuid)) {			return "true";		}		return "false";	}		/**	 * 根据传入的用户名判断该用户名是否已经存在	 * 	 * @param position	 * @param request	 * @param response	 * @return	 */	@RequestMapping(value = { "/checkposition" }, method = { RequestMethod.GET })	@ResponseBody	public String checkpositionExist(			@RequestParam("position") String position,			@RequestParam("uuid") String uuid, HttpServletRequest request,			HttpServletResponse response) {		if (myService.checkpositionExist(position, uuid)) {			return "true";		}		return "false";	}		/**	 * 更新	 * 	 * @param m	 * @param request	 * @param files	 * @return	 */	@RequestMapping(value = "/doUpdate", method = RequestMethod.POST)	public String update(			@ModelAttribute("m") ServicestafflevelModel m,			HttpServletRequest request,			@RequestParam(value = "files", required = false) MultipartFile[] files,			Model model) {				// 上传图片		this.myService.uploadImage(m, files);				// 跳转页面		return super.update(model, m, request);	}}