package com.aebiz.b2b2c.servicestaff.sysback.web.servicesstaffcomb;import java.util.ArrayList;import java.util.List;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.multipart.MultipartFile;import com.aebiz.b2b2c.baseframework.basecrud.vo.DataTablesPageParam;import com.aebiz.b2b2c.baseframework.basecrud.web.BaseController;import com.aebiz.b2b2c.baseframework.filemgr.service.FileService;import com.aebiz.b2b2c.baseframework.utils.StringUtil;import com.aebiz.b2b2c.cms.tags.service.TagsService;import com.aebiz.b2b2c.cms.tags.vo.TagsModel;import com.aebiz.b2b2c.servicestaff.departmentinfo.service.DepartmentInfoService;import com.aebiz.b2b2c.servicestaff.departmentinfo.vo.DepartmentInfoModel;import com.aebiz.b2b2c.servicestaff.doctorcategory.service.DoctorCategoryService;import com.aebiz.b2b2c.servicestaff.doctorcategory.vo.DoctorCategoryModel;import com.aebiz.b2b2c.servicestaff.hospitalinfo.service.HospitalInfoService;import com.aebiz.b2b2c.servicestaff.hospitalinfo.vo.HospitalInfoModel;import com.aebiz.b2b2c.servicestaff.servicestaff.service.ServicestaffService;import com.aebiz.b2b2c.servicestaff.servicestaffcomb.service.ServicestaffcombService;import com.aebiz.b2b2c.servicestaff.servicestaffcomb.vo.ServicestaffcombModel;import com.aebiz.b2b2c.servicestaff.servicestaffcomb.vo.ServicestaffcombQueryModel;import com.aebiz.b2b2c.servicestaff.servicestaffinfo.service.ServicestaffinfoService;import com.aebiz.b2b2c.servicestaff.servicestaffinfo.vo.CertTypeEnum;import com.aebiz.b2b2c.servicestaff.servicestaffinfo.vo.DoctorProfessionalEnum;import com.aebiz.b2b2c.servicestaff.servicestaffinfo.vo.ServicestaffinfoModel;import com.hxq.mobile.common.service.ServiceStaffCombService;import com.hxq.mobile.common.service.ServiceStaffService;import com.hxq.mobile.entity.common.ServiceStaffComb;import com.hxq.mobile.entity.common.ServiceStaffInfo;import com.hxq.mobile.support.service.ImgUploadService;import com.hxq.mobile.util.CompatibleTools;import com.hxq.mobile.util.Image4App;/** * 医生系统多模块复合控制器 *  * @author hedongfei *  */@Controller@RequestMapping("/sysback/servicestaffcomb")public class ServicestaffcombController extends BaseController<ServicestaffcombModel, ServicestaffcombQueryModel> {	public ServicestaffcombController() {		super("/servicestaff/sysback/servicestaffcomb", "Servicestaffcomb", ServicestaffcombController.class);	}	/* 复合service */	private ServicestaffcombService myService;	@Resource(name = "com.hxq.mobile.common.service.ServiceStaffCombService")	private ServiceStaffCombService sscService;	@Autowired	public void setMyService(ServicestaffcombService bs) {		this.myService = bs;		super.setBs(bs);	}	/**	 * 得到医生信息与详细信息的service	 */	@Autowired	private ServiceStaffCombService serviceStaffCombService;	/* 医生分类信息service */	@Autowired	private DoctorCategoryService doctorCategoryService;	/* 医生信息信息service */	@Autowired	private ServicestaffService servicestaffService;	/* 医生信息表 */	@Resource(name = "com.hxq.mobile.common.service.ServiceStaffService")	private ServiceStaffService serviceStaffService;	/* 医生基础信息service */	@Autowired	private ServicestaffinfoService servicestaffinfoService;	/* 医院信息service */	@Autowired	private HospitalInfoService hospitalService;	/* 科室信息service */	@Autowired	private DepartmentInfoService departmentService;	@Autowired	private TagsService tagService;	@Resource(name = "com.hxq.mobile.support.service.ImgUploadService")	private ImgUploadService imgService;	@Autowired	private FileService fileService;	/**	 * 平台添加医生时，判断用户名是否存在	 * 	 * @param	 */	@RequestMapping(value = { "/checkServiceStaffName" }, method = { RequestMethod.GET })	@ResponseBody	public String checkServiceStaffName(@RequestParam("serviceStaffName") String serviceStaffName,			HttpServletRequest request, HttpServletResponse response) {		if (servicestaffService.checkServiceStaffNameExist(serviceStaffName)) {			return "true";		}		return "false";	}	/**	 * 根据传入的手机号判断手机号是否已经存在	 * 	 * @param mobile	 *            手机号	 * @return	 */	@RequestMapping(value = { "/checkMobile" }, method = { RequestMethod.GET })	@ResponseBody	public String checkMobile(@RequestParam("mobile") String mobile, HttpServletRequest request,			HttpServletResponse response) {		if (servicestaffService.checkMobileExist(mobile)) {			return "true";		}		return "false";	}	/**	 * 根据传入的身份证判断身份证是否已经存在	 * 	 * @param serviceStaffName	 *            医生名	 * @return	 */	@RequestMapping(value = { "/checkServiceStaffinfoCertCode" }, method = { RequestMethod.GET })	@ResponseBody	public String checkServiceStaffinfoCertCode(@RequestParam("certCode") String certCode, HttpServletRequest request,			HttpServletResponse respons) {		if (servicestaffinfoService.checkServiceStaffinfoCertCode(certCode)) {			return "true";		}		return "false";	}	/**	 * 跳转新增家政员页面	 * 	 * @param model	 * @param request	 */	@RequestMapping(value = { "/toAddserviceStaff" }, method = { RequestMethod.GET })	public String toAddserviceStaff(Model model, HttpServletRequest request) {		// 将家政员等级放到页面上		preparedUpdateData(model, request);		return "servicestaff/sysback/servicestaff/ServicestaffAdd";	}	/**	 * 添加医生	 */	@RequestMapping(value = { "/addServicestaff" }, method = { RequestMethod.POST })	public String addServicestaff(Model model,			@ModelAttribute("m") ServicestaffcombModel m,			@RequestParam(value = "imgFile", required = false) MultipartFile[] imgFiles,			@RequestParam(value = "imgFile1", required = false) MultipartFile[] imgFiles1,			@RequestParam(value = "imgFile2", required = false) MultipartFile[] imgFiles2,			@RequestParam(value = "imgFile3", required = false) MultipartFile[] imgFiles3,			@RequestParam(value = "imgFile4", required = false) MultipartFile[] imgFiles4,			@RequestParam(value = "imgFile5", required = false) MultipartFile[] imgFiles5, HttpServletRequest request) {		this.getMapErrorMsg().clear();		this.myService.createDoctor(m);		ServicestaffinfoModel inm = m.getServicestaffinfoModel();		//		String province = request.getParameter("province");		String city = request.getParameter("city");		String region = request.getParameter("region");		inm.setProvince(province);		inm.setCity(city);		inm.setRegion(region);		myService.updateServicestaffBaseInfo(m, imgFiles, imgFiles1);		return "servicestaff/sysback/servicestaff/ServicestaffSuccess";	}	/**	 * 跳转下一步	 * 	 * @param uuid	 * @param model	 * @param m	 * @param request	 * @return	 */	@RequestMapping("/toAddNext")	public String toAddNext(@RequestParam("uuid") String uuid, Model model,			@ModelAttribute("m") ServicestaffcombModel m, HttpServletRequest request) {		ServicestaffcombModel servicestaffcombModel = myService.getServicestaffcombModel(uuid);		preparedUpdateData(model, request);		model.addAttribute("m", servicestaffcombModel);		return "servicestaff/sysback/servicestaff/ServicestaffAddNext";	}	/**	 * 向页面发送必要的数据	 */	@Override	protected void preparedUpdateData(Model model, HttpServletRequest request) {		// 医院信息		// sendHospitalsToPage(model);		// 科室信息		sendDepartsToPage(model);		// 医生分类		sendDoctorCategoryToPage(model);		// 医生职称		sendProfessionalToPage(model);	}	/**	 * 将医院信息发送到前台页面供选择	 * 	 * @param model	 */	private void sendHospitalsToPage(Model model) {		List<HospitalInfoModel> hospitalInfos = hospitalService.getHospitals();		model.addAttribute("hospitalInfos", hospitalInfos);	}	/**	 * 将科室信息发送到前台页面供选择	 * 	 * @param model	 */	private void sendDepartsToPage(Model model) {		List<DepartmentInfoModel> departmentInfos = departmentService.getAll();		model.addAttribute("departmentInfos", departmentInfos);	}	/**	 * 将医生分类发送到前台页面供选择	 * 	 * @param model	 */	private void sendDoctorCategoryToPage(Model model) {		List<DoctorCategoryModel> doctorCategorys = doctorCategoryService.getAll();		model.addAttribute("doctorCategorys", doctorCategorys);	}	/**	 * 将医生职称发送到前台页面展示	 * 	 * @param model	 */	private void sendProfessionalToPage(Model model) {		List<DataTablesPageParam> professionalList = new ArrayList<DataTablesPageParam>();		for (DoctorProfessionalEnum ct : DoctorProfessionalEnum.values()) {			DataTablesPageParam dpp = new DataTablesPageParam();			dpp.setName(ct.getKey());			dpp.setValue(ct.getValue());			professionalList.add(dpp);		}		model.addAttribute("professionalList", professionalList);	}	/**	 * 将证件类型发送到前台页面展示	 * 	 * @param model	 */	private void sendCertTypeShowName(Model model) {		List<DataTablesPageParam> certTypeList = new ArrayList<DataTablesPageParam>();		for (CertTypeEnum ct : CertTypeEnum.values()) {			DataTablesPageParam dpp = new DataTablesPageParam();			dpp.setName(ct.getKey());			dpp.setValue(ct.getValue());			certTypeList.add(dpp);		}		model.addAttribute("certTypeList", certTypeList);	}	/**	 * 更新会员账户信息	 * 	 * @param model	 * @param m	 * @param request	 * @return	 */	@RequestMapping(value = { "/updateAccountInfo" }, method = { RequestMethod.POST })	public String updateAccountInfo(Model model, @ModelAttribute("m") ServicestaffcombModel m,			HttpServletRequest request) {		// 将mapErrorMsg清空		this.getMapErrorMsg().clear();		cleanQuerySession(request);		myService.updateServiceStaffAccountInfo(m.getServicestaffModel());		return "servicestaff/sysback/servicestaff/ServicestaffinfoSuccess";	}	/**	 * 更新会员基础信息	 * 	 * @param model	 * @param m	 * @param request	 * @return	 */	@RequestMapping(value = { "/updateBaseInfo" }, method = { RequestMethod.POST })	public String updateBaseInfo(Model model,			// @ModelAttribute("m") ServicestaffcombModel m,			@ModelAttribute("m") ServiceStaffComb m, HttpServletRequest request,			@RequestParam(value = "imgFile", required = false) MultipartFile[] imgFiles,			@RequestParam(value = "certFile", required = false) MultipartFile[] certFile) {		try {			this.serviceStaffService.update(m.getServiceStaff());		} catch (Exception e) {			e.printStackTrace();		}		String province = request.getParameter("province");		String city = request.getParameter("city");		String region = request.getParameter("region");		ServiceStaffInfo ssi = m.getServiceStaffInfo();		ssi.setProvince(province);		ssi.setCity(city);		ssi.setRegion(region);		sscService.updateServicestaffBaseInfo(m, imgFiles, certFile);		// myService.updateServicestaffBaseInfo(m, imgFiles,imgFiles1);		// 设置医生id		request.setAttribute("uuid", m.getServiceStaff().getUuid());		String type = request.getParameter("type");		String path = "";		if(type.equals("0")){			path = "servicestaff/sysback/servicestaff/ServicestaffUpdateSuccess";		}else if(type.equals("1")){			path = "servicestaff/sysback/servicestaff/ServicestaffSuccess";		}		return path;	}	/**	 * 编辑医生的基本信息	 * 	 * @param uuid	 * @param model	 * @param m	 * @param request	 * @return	 */	@RequestMapping("/toUpdateServicestaff/{uuid}")	public String toUpdateServicestaff(@PathVariable("uuid") String uuid, Model model, HttpServletRequest request) {		ServiceStaffComb serviceStaffComb = serviceStaffCombService.getServiceStaffComb(uuid);		ServiceStaffInfo serviceStaffInfo = serviceStaffComb.getServiceStaffInfo();		if (serviceStaffInfo != null) {			// 证件照			Image4App[] certImages = CompatibleTools.getImages(imgService, fileService,					serviceStaffInfo.getCertImage());			String certImage = "";			if (certImages != null && certImages.length > 0) {				certImage = certImages[0].getLarge();			}			serviceStaffInfo.setCertImage(certImage);			// 头像			Image4App[] images = CompatibleTools.getImages(imgService, fileService, serviceStaffInfo.getImage());			String image = "";			if (images != null && images.length > 0) {				image = images[0].getLarge();			}			serviceStaffInfo.setImage(image);		}		serviceStaffComb.setServiceStaffInfo(serviceStaffInfo);		preparedUpdateData(model, request);		model.addAttribute("m", serviceStaffComb);		// 获取标签对象		String doctorTag = "";		if (serviceStaffComb.getServiceStaff() != null) {			doctorTag = serviceStaffComb.getServiceStaff().getDoctorTag();		}		List<TagsModel> tags = tagService.getTagsByDoctorTag(doctorTag);		model.addAttribute("tags", tags);		model.addAttribute("m", serviceStaffComb);		//0:从医生审核管理页面跳到修改页面 ,1:从医生管理页面跳到修改页面		String type = request.getParameter("type");		model.addAttribute("type",type);		return "servicestaff/sysback/servicestaff/ServicestaffUpdate";	}	/**	 * 查看会员信息	 * 	 * @param uuid	 * @param model	 * @param request	 * @return	 */	@RequestMapping("/toView/{uuid}")	public String toView(@PathVariable("uuid") String uuid, Model model, HttpServletRequest request) {		ServiceStaffComb serviceStaffComb = serviceStaffCombService.getServiceStaffComb(uuid);		ServiceStaffInfo serviceStaffInfo = serviceStaffComb.getServiceStaffInfo();		if (serviceStaffInfo != null) {			Image4App[] image = CompatibleTools.getImages(imgService, fileService, serviceStaffInfo.getCertImage());			String certImage = "";			if (image != null && image.length > 0) {				certImage = image[0].getLarge();			}			serviceStaffInfo.setCertImage(certImage);		}		serviceStaffComb.setServiceStaffInfo(serviceStaffInfo);		model.addAttribute("m", serviceStaffComb);		// 获取标签对象		String doctorTag = "";		if (serviceStaffComb.getServiceStaff() != null) {			doctorTag = serviceStaffComb.getServiceStaff().getDoctorTag();		}		List<TagsModel> tags = tagService.getTagsByDoctorTag(doctorTag);		model.addAttribute("tags", tags);		return "servicestaff/sysback/servicestaff/ServicestaffCheckView";	}	/**	 * 医生管理中的查看 功能包括查看账户信息，基础信息，订单信息	 * 	 * @param uuid	 * @param model	 * @param request	 * @return	 */	@RequestMapping("/toServicestaffView/{uuid}")	public String toServicestaffView(@PathVariable("uuid") String uuid,			Model model, HttpServletRequest request) {		ServiceStaffComb serviceStaffComb = serviceStaffCombService.getServiceStaffComb(uuid);		ServiceStaffInfo serviceStaffInfo = serviceStaffComb.getServiceStaffInfo();						if(serviceStaffInfo != null){			//证件照		Image4App[] certImages = CompatibleTools.getImages(imgService,fileService,serviceStaffInfo.getCertImage());		String certImage = "";		if(certImages != null && certImages.length>0){			certImage = certImages[0].getLarge();		}		serviceStaffInfo.setCertImage(certImage);		//头像		Image4App[] images = CompatibleTools.getImages(imgService,fileService,serviceStaffInfo.getImage());		String image = "";			if(images != null && images.length>0){				image = images[0].getLarge();			}			serviceStaffInfo.setImage(image);		}						serviceStaffComb.setServiceStaffInfo(serviceStaffInfo);		model.addAttribute("m", serviceStaffComb);		// 获得图文咨询数量		model.addAttribute("picWordCount",				servicestaffService.getOnlineCount(uuid, "0"));		// 获得电话咨询数量 及状态		model.addAttribute("telCount",				servicestaffService.getOnlineCount(uuid, "1"));// 数量		if (servicestaffService.getTelState(uuid).equals("1")) {			model.addAttribute("telState", "开通");// 状态		} else {			model.addAttribute("telState", "未开通");// 状态		}		// 获得加号咨询数量 及状态		model.addAttribute("orderCount",				servicestaffService.getOnlineCount(uuid, "2"));// 数量		if (servicestaffService.getOrderState(uuid).equals("1")) {			model.addAttribute("orderState", "开通");// 状态		} else {			model.addAttribute("orderState", "未开通");// 状态		}		// 获得私人医生数量及状态		model.addAttribute("personalCount",				servicestaffService.getOnlineCount(uuid, "2"));// 数量		if (servicestaffService.getPersonalState(uuid).equals("1")) {			model.addAttribute("personalState", "开通");// 状态		} else {			model.addAttribute("personalState", "未开通");// 状态		}		// 获得随访数量		model.addAttribute("visitCount",servicestaffService.getvisitCount(uuid));// 数量				//获取标签对象		String doctorTag = serviceStaffComb.getServiceStaff().getDoctorTag();			List<TagsModel> tags = tagService.getTagsByDoctorTag(doctorTag);		model.addAttribute("tags", tags);				return "servicestaff/sysback/servicestaff/ServicestaffViewNew";	}	/**	 * 查看黑名单会员信息	 * 	 * @param uuid	 * @param model	 * @param request	 * @return	 */	@RequestMapping("/toBlackView/{uuid}")	public String toBlackView(@PathVariable("uuid") String uuid, Model model, HttpServletRequest request) {		// 通过id获得复合model		ServicestaffcombModel servicestaffcombModel = myService.getServicestaffcombModel(uuid);		preparedUpdateData(model, request);		model.addAttribute("m", servicestaffcombModel);		return "servicestaff/sysback/servicestaff/ServicestaffBlackView";	}	/**	 * 根据传入的uuid改变审核状态	 * 	 * @param uuid	 * @param	 * @param	 * @return	 */	@RequestMapping("/tochangeauditSate/{uuid}")	public String tochangeauditSate(@PathVariable("uuid") String uuid, Model model, HttpServletRequest request) {		// 审核状态		String state = request.getParameter("state");		// 备注		String note = request.getParameter("note");		Boolean servicestaffcombModel = myService.changeauditSate(uuid, state, note);		// 审核状态 0:待审核 1：审核通过 2 审核不通过		if (!StringUtil.isEmpty(state) && state.equals("2")) {			return "servicestaff/sysback/servicestaff/ServicestaffUnApplyList";		} else {			return "servicestaff/sysback/servicestaff/ServicestaffApplyList";		}	}	/**	 * 根据传入的uuid改变认证状态	 * 	 * @param uuid	 * @param	 * @param	 * @return	 */	@RequestMapping("/tochangecertificationSate")	public String tochangecertificationSate(Model model, HttpServletRequest request) {		// uuid		String uuid = request.getParameter("uuid");		// 认证状态		String state = request.getParameter("state");		// 备注		String note = request.getParameter("note");		Boolean servicestaffcombModel = myService.changecertificationSate(uuid, state, note);		return "servicestaff/sysback/servicestaff/ServicestaffInterviewList";	}}