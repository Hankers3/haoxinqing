package com.aebiz.b2b2c.servicestaff.sysback.web.servicestaff;import java.io.IOException;import java.io.PrintWriter;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.shiro.SecurityUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import com.aebiz.b2b2c.baseframework.basecrud.vo.BaseModel;import com.aebiz.b2b2c.baseframework.basecrud.vo.ConditionOpTypeEnum;import com.aebiz.b2b2c.baseframework.basecrud.web.BaseController;import com.aebiz.b2b2c.baseframework.basecrud.web.vo.BaseWebModel;import com.aebiz.b2b2c.baseframework.message.MessageHelper;import com.aebiz.b2b2c.baseframework.utils.DateFormatHelper;import com.aebiz.b2b2c.baseframework.utils.StringUtil;import com.aebiz.b2b2c.cms.innermessage.service.InnerMessageService;import com.aebiz.b2b2c.cms.innermessage.vo.InnerMessageModel;import com.aebiz.b2b2c.cms.innermessagenotice.service.InnerMessageNoticeService;import com.aebiz.b2b2c.cms.innermessagenotice.vo.InnerMessageNoticeModel;import com.aebiz.b2b2c.cms.tags.service.TagsService;import com.aebiz.b2b2c.cms.tags.vo.TagsModel;import com.aebiz.b2b2c.customermgr.consultrecord.service.ConsultRecordService;import com.aebiz.b2b2c.customermgr.consultrecord.vo.ConsultRecordModel;import com.aebiz.b2b2c.customermgr.mobile.web.push.JPushService;import com.aebiz.b2b2c.customermgr.mobile.web.push.PushConst;import com.aebiz.b2b2c.servicestaff.hospitalinfo.service.HospitalInfoService;import com.aebiz.b2b2c.servicestaff.hospitalinfo.vo.HospitalInfoModel;import com.aebiz.b2b2c.servicestaff.servicestaff.service.ServicestaffService;import com.aebiz.b2b2c.servicestaff.servicestaff.vo.ServicestaffModel;import com.aebiz.b2b2c.servicestaff.servicestaff.vo.ServicestaffQueryModel;import com.aebiz.b2b2c.servicestaff.servicestaffinfo.service.ServicestaffinfoService;import com.aebiz.b2b2c.visitprecept.customerdoctorrele.service.CustomerDoctorReleService;import com.aebiz.b2b2c.visitprecept.customerdoctorrele.vo.CustomerDoctorReleModel;import com.alibaba.fastjson.JSON;import com.hxq.mobile.common.service.ServiceStaffInfoService;import com.hxq.mobile.common.service.ServiceStaffService;import com.hxq.mobile.entity.common.Concern;import com.hxq.mobile.entity.common.QueryUtil;import com.hxq.mobile.entity.common.ServiceStaff;import com.hxq.mobile.entity.common.ServiceStaffInfo;import com.hxq.mobile.patient.common.service.ConcernService;@Controller@RequestMapping("/sysback/servicestaff")public class ServicestaffController extends BaseController<ServicestaffModel, ServicestaffQueryModel> {	private ServicestaffService myService;	@Autowired	public void setMyService(ServicestaffService bs) {		this.myService = bs;		super.setBs(bs);	}	public ServicestaffController() {		super("/servicestaff/sysback/servicestaff", "Servicestaff", ServicestaffController.class);	}	/* 家政员基础信息service */	@Autowired	private ServicestaffinfoService servicestaffinfoService;	/* 注入站内信service */	@Autowired	private InnerMessageService messageService;	/* 注入医院service */	@Autowired	private HospitalInfoService hospitalInfoService;	@Resource(name = "com.hxq.mobile.common.service.ServiceStaffService")	private ServiceStaffService serviceStaffService;		@Resource(name = "com.hxq.mobile.common.service.ServiceStaffInfoService")	private ServiceStaffInfoService serviceStaffInfoServiceS;		@Resource(name = "com.hxq.mobile.patient.common.service.ConcernService")	private ConcernService concernService;	/* InnerMessageNoticeService */	@Autowired	private InnerMessageNoticeService InnerMessageNoticeService;	/* 注入标签库service */	@Autowired	private TagsService tagsService;	/* 注入图文咨询信息 */	@Autowired	private ConsultRecordService consultRecordService;	/* 医生患者关联关系 */	@Autowired	private CustomerDoctorReleService customerDoctorReleService;	/* 消息的service */	@Autowired	private InnerMessageService innerMessageService;	/**	 * 查询待审核医生申请的	 * 	 * @param model	 * @param request	 */	@RequestMapping(value = { "/toApplyList" }, method = { RequestMethod.GET })	public String toApplyList(Model model, HttpServletRequest request) {		// 将医院list放入		// preparedListData(model, request);		return "servicestaff/sysback/servicestaff/ServicestaffApplyList";	}	@RequestMapping(value = { "/queryList" })	public String queryList(HttpServletResponse response, HttpServletRequest request) throws Exception {		Map pageParamMap = parsePageParam(request);		BaseModel qm = parseQueryModel(request);		ServicestaffModel servicestaffModer = (ServicestaffModel) qm;		ServiceStaff staff = new ServiceStaff();		staff.setRealName(servicestaffModer.getRealName());		staff.setMobile(servicestaffModer.getMobile());		staff.setEmail(servicestaffModer.getEmail());		staff.setSate(servicestaffModer.getSate());		staff.setRegState(servicestaffModer.getRegState());		staff.setHospital(servicestaffModer.getHospital());				staff.setDoctorType(servicestaffModer.getDoctorType());				QueryUtil queryUtil = new QueryUtil();		int iDisplayStart = ((Integer) pageParamMap.get("iDisplayStart")).intValue();		int iDisplayLength = ((Integer) pageParamMap.get("iDisplayLength")).intValue();		int iSortCol_0 = ((Integer) pageParamMap.get("iSortCol_0")).intValue();		String sortFieldName = (String) pageParamMap				.get((new StringBuilder()).append("mDataProp_").append(iSortCol_0).toString());		String sortTypeString = (String) pageParamMap.get("sSortDir_0");		queryUtil.setStart(iDisplayStart);		queryUtil.setLength(iDisplayLength);		Boolean needSort = (Boolean) pageParamMap				.get((new StringBuilder()).append("bSortable_").append(iSortCol_0).toString());		if (needSort.booleanValue()) {			queryUtil.setSortName(sortFieldName);			queryUtil.setSortType(sortTypeString);		} else { // 默认排序字段			queryUtil.setSortName(" o.createTime ");			queryUtil.setSortType(" desc ");		}		List<ServiceStaff> listData = serviceStaffService.queryServiceStaff(staff, queryUtil);		if(listData==null){			listData = new  ArrayList<ServiceStaff>();		}		long totalCount = serviceStaffService.queryCount(staff);		Map jsonMap = new HashMap();		jsonMap.put("sEcho", pageParamMap.get("sEcho"));		jsonMap.put("iTotalRecords", Long.valueOf(totalCount));		jsonMap.put("iTotalDisplayRecords", Long.valueOf(totalCount));		jsonMap.put("aaData", listData);		response.setContentType("charset=UTF-8");		response.setCharacterEncoding("UTF-8");		PrintWriter out = response.getWriter();		out.print(JSON.toJSONString(jsonMap));		return null;	}		@RequestMapping(value = { "/toList" }, method = { RequestMethod.GET })    public String toList(Model model, HttpServletRequest request){        return "servicestaff/sysback/servicestaff/ServicestaffList";    }		/**	 * 查询审核未通过医生申请的	 * 	 * @param model	 * @param request	 */	@RequestMapping(value = { "/toUnApplyList" }, method = { RequestMethod.GET })	public String toUnApplyList(Model model, HttpServletRequest request) {		// 将医院list放入		// preparedListData(model, request);		return "servicestaff/sysback/servicestaff/ServicestaffUnApplyList";	}	/**	 * 查询医生认证的	 * 	 * @param model	 * @param request	 */	@RequestMapping(value = { "/toInterviewList" }, method = { RequestMethod.GET })	public String toInterviewList(Model model, HttpServletRequest request) {		return "servicestaff/sysback/servicestaff/ServicestaffInterviewList";	}	/**	 * 查询医生冻结的	 * 	 * @param model	 * @param request	 */	@RequestMapping(value = { "/toEntryList" }, method = { RequestMethod.GET })	public String toEntryList(Model model, HttpServletRequest request) {		return "servicestaff/sysback/servicestaff/ServicestaffEntryList";	}	/**	 * 查询黑名单里的	 * 	 * @param model	 * @param request	 */	@RequestMapping(value = { "/toBlackList" }, method = { RequestMethod.GET })	public String toBlackList(Model model, HttpServletRequest request) {		return "servicestaff/sysback/servicestaff/ServicestaffBlackList";	}	/**	 * 删除医生标签	 * 	 * @param model	 * @param request	 */	@RequestMapping(value = { "/toDeleteTag" }, method = { RequestMethod.GET })	@ResponseBody	public String toDeleteTag(Model model, @RequestParam("uuid") String uuid, @RequestParam("tagUuid") String tagUuid,			HttpServletRequest request) {		// 调用service 删除医生对应标签		myService.deleteTag(uuid, tagUuid);		return "success";	}	/**	 * 增加医生标签	 * 	 * @param model	 * @param request	 */	@RequestMapping(value = { "/addTag" }, method = { RequestMethod.GET })	@ResponseBody	public String addTag(Model model, @RequestParam("uuid") String uuid, @RequestParam("tagId") String tagId,			HttpServletRequest request) {		// 调用service 删除医生对应标签		myService.addTag(uuid, tagId);		return "success";	}	/**	 * 黑名单解冻老多数据的	 * 	 * @param model	 * @param request	 */	/*	 * @RequestMapping(value = "/unfreeze", method = RequestMethod.POST)	 * 	 * @ResponseBody public String unfreeze(	 * 	 * @RequestParam("selectOne") List<String> needDeleteUuids, BaseWebModel wm,	 * HttpServletRequest request, HttpServletResponse response) throws	 * Exception {	 * 	 * if(needDeleteUuids!=null&&needDeleteUuids.size()>0){ for(int i=0;i <	 * needDeleteUuids.size(); i++) { ServicestaffModel s =	 * myService.getByUuid(needDeleteUuids.get(i)); s.setFrozenSate("0");	 * myService.update(s); } } return "true"; }	 */	/**	 * 会员解冻,需要更新会员登录信息中的冻结状态<br />	 * 1表示冻结，0表示未冻结	 * 	 * @param uuids	 * @param response	 * @return	 * @throws IOException	 */	@RequestMapping("/unfrozen")	@ResponseBody	public String unfrozen(@RequestParam("selectOne") List<String> needDeleteUuids,			@RequestParam("frozenSate") String frozenSate, HttpServletResponse response) throws IOException {		this.myService.unfrozen(needDeleteUuids, frozenSate);	     Map jsonMap = new HashMap();	     jsonMap.put("rsp", Boolean.valueOf(true));	     PrintWriter out = response.getWriter();	     out.print(JSON.toJSONString(jsonMap));				return null;	}	/**	 * 需要更医生审核状态的状态<br />	 * 	 * @param uuid	 * @param response	 * @return	 */	@RequestMapping("/upStaffState")	@ResponseBody	public String upStaffState(@RequestParam("uuid") String uuid, @RequestParam("state") String state,			@RequestParam("auditNote") String auditNote, HttpServletResponse response) {			//	myService.unpdateState(uuid, state, auditNote);		ServiceStaff serviceStaff = new ServiceStaff();		serviceStaff.setSate(state);		serviceStaff.setAuditNote(auditNote);		serviceStaff.setUuid(uuid);				try {			serviceStaffService.update(serviceStaff);		} catch (Exception e1) {			e1.printStackTrace();		}		// 消息发送		Map<String, String> messageMap = new HashMap<String, String>();		// 消息体		messageMap.put("pushClient", JPushService.USER_DOCTOR);		if ("2".equals(state)) {			messageMap.put("message", "审核不通过");		} else {			messageMap.put("message", "审核通过");		}		messageMap.put("url", "http://admin.hxqydyl.com/html/index/page.shtml?doctorUuid=" + uuid);		List<String> userId = new ArrayList<String>();		userId.add(uuid);		try {			 JPushService.pushSystemMessage(userId, messageMap);		} catch (Exception e) {			System.out.println("==================推送异常================");		}		// return ApiResult.right(map);		// String flag = "{\"flag\":\"true\"}";		return "true";	}	/**	 * 冻结 根据会员uuid对会员冻结<br />	 * 1表示冻结，0表示未冻结 hedongfei	 * 	 * @param uuids	 * @param response	 * @return	 * @throws IOException	 */	@RequestMapping("/frozen/{serviceStaffuuid}")	public String frozen(@PathVariable("serviceStaffuuid") String serviceStaffuuid, HttpServletResponse response)			throws IOException {		// this.myService.unpdateState(serviceStaffuuid, "1");		this.myService.unpdateFreezeState(serviceStaffuuid, "1");		String content = "您的账户已被冻结,如需帮助，请拨打客服热线：010-58482558";		// 保存发送信息		InnerMessageModel im = this.saveInnerMessage(content, serviceStaffuuid);		// 保存通知信息 by hdf		this.saveinnerMessageNotice(serviceStaffuuid, im.getUuid());		List<String> uuids = new ArrayList<String>();		uuids.add(serviceStaffuuid);		return "servicestaff/sysback/servicestaff/ServicestaffList";	}	/**	 * 后台冻结账户保存发送消息	 * 	 * @author zdx	 * @date 2015-6-8	 * @param content	 * @param staffId	 * @return	 */	public InnerMessageModel saveInnerMessage(String content, String staffId) {		InnerMessageModel im = new InnerMessageModel();		// 收件人类别		im.setAccountType(InnerMessageModel.ACCOUNT_TYPE_STORE);		im.setContent(content);		im.setMessageType(InnerMessageModel.MESSAGE_TYPE_PROMOTION);		im.setReceiveUser(staffId);		im.setSendUser("system");		im.setTitle("您的账户已被冻结，点击查看详情");		im.setReadStatus("0");		// 已发送		im.setSendStatus("1");		// 2代表app端读取时进入消息页面		// im.setMessageOpenType("2");		im.setSendTime(DateFormatHelper.getNowTimeStr());		messageService.create(im);		return im;	}	/**	 * 后台冻结账户保存InnerMessageNoticeModel	 * 	 * @author hdf	 * @date 2015-6-12	 * @param content	 * @param staffId	 * @return	 */	public InnerMessageNoticeModel saveinnerMessageNotice(String userid, String messageuuid) {		InnerMessageNoticeModel imn = new InnerMessageNoticeModel();		imn.setUserId(userid);		imn.setMessageUuid(messageuuid);		imn.setReadStatus("0");		InnerMessageNoticeService.create(imn);		return imn;	}	/*	 * 密码重置 hedongfei	 */	@RequestMapping(value = { "/pwdreset" })	public String pwdreset(Model model, HttpServletRequest request, HttpServletResponse response,			@ModelAttribute("m") ServicestaffModel m) throws Exception {		String pwd = request.getParameter("pwd");		String confirmPwd = request.getParameter("confirmPwd");		Map<String, Object> jsonMap = new HashMap<String, Object>();		// 如果密码为空		if (StringUtil.isEmpty(pwd)) {			jsonMap.put("message", "pwd_empty");		}		// 如果密码不匹配		if (StringUtil.isEmpty(confirmPwd) && !pwd.equals(confirmPwd)) {			jsonMap.put("message", "no_equal");		}		// 得到对象		ServicestaffModel sfm = myService.getByUuid(m.getUuid());		sfm.setPassword(pwd);		myService.update(sfm);		jsonMap.put("message", "success");		response.setContentType("charset=UTF-8");		response.setCharacterEncoding("UTF-8");		PrintWriter out = response.getWriter();		out.print(JSON.toJSONString(jsonMap));		return null;	}	/**	 * 获取会员平台等级	 */	@Override	protected void preparedUpdateData(Model model, HttpServletRequest request) {		// 会员平台等级展示数据		// getServicestafflevelModel(model);	}	/**	 * 跳转新增家政员页面	 * 	 * @param model	 * @param request	 */	@RequestMapping(value = { "/toAddserviceStaff" }, method = { RequestMethod.GET })	public String toAddserviceStaff(Model model, HttpServletRequest request) {		// 将家政员等级放到页面上		preparedUpdateData(model, request);		return "servicestaff/sysback/servicestaff/ServicestaffAdd";	}	/**	 * 押金管理页面	 * 	 * @param model	 * @param request	 */	@RequestMapping(value = { "/toDepositAdminister" }, method = { RequestMethod.GET })	public String toDepositAdminister(Model model, HttpServletRequest request) {		return "servicestaff/sysback/servicestaff/DepositAdminister";	}	/**	 * 修改家政员押金金额及状态 hedongfei	 * 	 * @param uuid	 * @param deposit	 * @param depositState	 */	@RequestMapping("/getServicestaffModelByUuid/{uuid}")	public String getServicestaffModelByUuid(@PathVariable("uuid") String uuid, HttpServletResponse response,			Model model) {		ServicestaffModel servicestaffModel = myService.getServicestaffModelByUuid(uuid);		model.addAttribute("t", servicestaffModel);		return "servicestaff/sysback/servicestaff/ShowDeposit";	}	@RequestMapping(value = "/deletes", method = RequestMethod.POST)	public String deletes(@RequestParam("selectOne") List<String> needDeleteUuids, BaseWebModel wm,			HttpServletRequest request, HttpServletResponse response) throws Exception {				if (needDeleteUuids != null && needDeleteUuids.size() > 0) {			for (int i = 0; i < needDeleteUuids.size(); i++) {				ServiceStaffInfo serviceStaffInfo = serviceStaffInfoServiceS.selectByServiceStaffUuid(needDeleteUuids.get(i));				serviceStaffInfoServiceS.delete(serviceStaffInfo);			}		}				Concern concern = new Concern();		concern = concernService.selectConcernByid(needDeleteUuids.get(0)); 		serviceStaffService.delete(concern);		ServiceStaff serviceStaff = new ServiceStaff();		serviceStaff.setUuid(needDeleteUuids.get(0));		serviceStaffService.delete(serviceStaff);			     Map jsonMap = new HashMap();	     jsonMap.put("rsp", Boolean.valueOf(true));	     PrintWriter out = response.getWriter();	      out.print(JSON.toJSONString(jsonMap));				return null;	}	/**	 * 执行查询操作，查询后转向list界面	 * 	 * @param qm	 *            查询的model	 * @param request	 *            Http请求对象	 * @return 转向list的路径	 */	@RequestMapping(value = "/query", method = { RequestMethod.POST })	public String query(ServicestaffQueryModel qm, @RequestParam("pageShow") String pageShow,			HttpServletRequest request) {		// 辅助设置要查询的条件的比较方式		Map<String, String[]> map = request.getParameterMap();		for (String key : map.keySet()) {			if (key.endsWith("_q")) {				String v = map.get(key)[0];				((ServicestaffQueryModel) qm).getMapCondition().put(key.substring(0, key.length() - 2),						ConditionOpTypeEnum.valueOf(v).getCode());			}		}		SecurityUtils.getSubject().getSession().setAttribute("ServicestaffQueryModelIsQuery", "true");		SecurityUtils.getSubject().getSession().setAttribute("ServicestaffQueryModel", qm);		String searchTpe = request.getParameter("searchTpe");		SecurityUtils.getSubject().getSession().setAttribute("searchTpe", searchTpe);		return "redirect:/sysback/servicestaff/list/1/" + pageShow;	}	/*******************************************************************************/	/**	 * 查询所有是名医风采的全部查询出来	 * 	 * @param model	 * @param request	 */	@RequestMapping(value = { "/toFamousServicestaffList" }, method = { RequestMethod.GET })	public String toFamousServicestaffList(Model model, HttpServletRequest request) {		return "servicestaff/sysback/servicestaff/famousServicestaffList";	}	/**	 * 将是名医风采的医生不再关联名医风采	 * 	 * @param model	 * @param request	 */	@RequestMapping(value = { "/toUpdateFamousServicestaff/{uuid}" }, method = { RequestMethod.GET })	public String toUpdateFamousServicestaff(Model model, @PathVariable("uuid") String uuid,			HttpServletRequest request) {		ServicestaffModel m = myService.getByUuid(uuid);		if (null != m && ("1").equals(m.getDoctorType())) {			m.setDoctorType("2");			myService.update(m);		} else {			m.setDoctorType("1");			myService.update(m);		}		return "servicestaff/sysback/servicestaff/famousServicestaffList";	}	/**	 * 跳转到添加名医风采管理	 * 	 * @param model	 * @param request	 * @throws IOException	 */	@RequestMapping(value = { "/updateSortServicestaff" }, method = { RequestMethod.POST })	public String updateSortServicestaff(HttpServletRequest request, HttpServletResponse response)			throws IOException {		String sortStr = request.getParameter("sort");		String sortes[] = sortStr.split(";");		ServiceStaff serviceStaff = null;		for (String sortTemp : sortes) {			try {				String sort[] = sortTemp.split(",");				serviceStaff = new ServiceStaff();				if (sort != null && sort.length == 2) {					serviceStaff.setUuid(sort[0]);					serviceStaff.setSort(Integer.valueOf(sort[1]));					serviceStaffService.updateDoctor(serviceStaff);				}			} catch (Exception e) {				e.printStackTrace();			}		}		Map jsonMap = new HashMap();		jsonMap.put("rsp", Boolean.valueOf(true));		PrintWriter out = response.getWriter();		out.print(JSON.toJSONString(jsonMap));		return null;	}		/**	 * 跳转到添加名医风采管理	 * 	 * @param model	 * @param request	 */	@RequestMapping(value = { "/toAddFamousServicestaff" }, method = { RequestMethod.POST })	public String toAddFamousServicestaff(Model model, HttpServletRequest request) {		List<TagsModel> taglist = tagsService.getAll();		if (null != taglist && taglist.size() > 0) {			model.addAttribute("list", taglist);		}		return "servicestaff/sysback/servicestaff/addFamousServicestaff";	}		/**	 * 批量修改名医风采状态	 * 	 * @param needUpdatesUuids	 * @param model	 * @param request	 * @return	 */	@RequestMapping(value = { "/updates" }, method = { RequestMethod.POST })	public String updates(@RequestParam("selectOne") List<String> needUpdatesUuids, Model model,			HttpServletRequest request) {		if (needUpdatesUuids != null && needUpdatesUuids.size() > 0) {			for (String uuid : needUpdatesUuids) {				ServicestaffModel m = myService.getByUuid(uuid);				if (m != null) {					m.setDoctorType("1");					myService.update(m);				}			}		}		return "servicestaff/sysback/servicestaff/famousServicestaffList";	}	@Override	protected void preparedListData(Model model1, HttpServletRequest httpservletrequest) {		// 放入医院信息		List<HospitalInfoModel> hospitalInfoList = hospitalInfoService.getHospitals();		httpservletrequest.setAttribute("hospitalList", hospitalInfoList);	}	/**	 * 跳转到绑定医生页面	 * 	 * @param model	 * @param request	 */	@RequestMapping(value = { "/toBindServicestaffList" }, method = { RequestMethod.POST })	public String toAddServicestaffList(Model model, @RequestParam("consultUuid") String consultUuid,			HttpServletRequest request) {		List<TagsModel> taglist = tagsService.getAll();		if (null != taglist && taglist.size() > 0) {			model.addAttribute("list", taglist);		}		model.addAttribute("consultUuid", consultUuid);		return "servicestaff/sysback/servicestaff/BindServicestaffList";	}			/**	 * 重新绑定	 * 	 * @param model	 * @param request	 */	@RequestMapping(value = { "/toUpdateBindServicestaff/{uuid}" }, method = { RequestMethod.GET })	public String toUpdateBindServicestaff(Model model, @PathVariable("uuid") String uuid,			@RequestParam("consultUuid") String consultUuid, HttpServletRequest request) {		if (!StringUtil.isEmpty(consultUuid)) {			ConsultRecordModel cm = consultRecordService.getByUuid(consultUuid);			if (cm != null) {											cm.setDoctorUuid(uuid);				consultRecordService.update(cm);				// 创建医生和患者的关联关系				CustomerDoctorReleModel cdrm = customerDoctorReleService						.getByCustomerUuidAndDoctorUuid(cm.getCustomerUuid(), uuid);				if (null == cdrm) {					CustomerDoctorReleModel crm = new CustomerDoctorReleModel();					crm.setCustomerUuid(cm.getCustomerUuid());					crm.setDoctorUuid(uuid);					crm.setCreateTime(DateFormatHelper.getNowTimeStr());					customerDoctorReleService.create(crm);				}				/*------------------------------------------消息推送------------------------------------------*/				innerMessageService.saveInnerMessageAndPush("", uuid,						MessageHelper.getMessage("consultrecordMesg.showmessage.newAdd"),						InnerMessageModel.MESSAGE_TYPE_SYSTEM, InnerMessageModel.ACCOUNT_TYPE_STORE,						PushConst.push_client_service, "", "", "");			}		}		return "redirect:/sysback/consultrecord/toDetail/" + consultUuid;	}}