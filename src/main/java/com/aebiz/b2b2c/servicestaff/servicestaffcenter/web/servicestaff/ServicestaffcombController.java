/*package com.aebiz.b2b2c.servicestaff.servicestaffcenter.web.servicestaff;import java.util.ArrayList;import java.util.Date;import java.util.List;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.UsernamePasswordToken;import org.apache.shiro.subject.Subject;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.multipart.MultipartFile;import com.aebiz.b2b2c.baseframework.basecrud.vo.DataTablesPageParam;import com.aebiz.b2b2c.baseframework.basecrud.web.BaseController;import com.aebiz.b2b2c.baseframework.basecrud.web.vo.BaseWebModel;import com.aebiz.b2b2c.baseframework.message.MessageHelper;import com.aebiz.b2b2c.baseframework.utils.DateFormatHelper;import com.aebiz.b2b2c.baseframework.utils.LoginUserHelper;import com.aebiz.b2b2c.baseframework.utils.StringUtil;import com.aebiz.b2b2c.baseframework.uuidservice.service.UuidService;import com.aebiz.b2b2c.basicdata.city.service.CityService;import com.aebiz.b2b2c.cms.innermessagenotice.service.InnerMessageNoticeService;import com.aebiz.b2b2c.cms.innermessagenotice.vo.InnerMessageNoticeModel;import com.aebiz.b2b2c.customermgr.customeraddress.vo.CustomerAddressModel;import com.aebiz.b2b2c.order.orderdetail.service.OrderDetailService;import com.aebiz.b2b2c.order.ordermain.service.OrderMainService;import com.aebiz.b2b2c.order.ordermain.vo.OrderMainModel;import com.aebiz.b2b2c.order.ordermainaddress.service.OrderMainAddressService;import com.aebiz.b2b2c.order.ordermainaddress.vo.OrderMainAddressModel;import com.aebiz.b2b2c.order.orderstaff.service.OrderStaffService;import com.aebiz.b2b2c.order.orderstaffmutual.service.OrderStaffMutualService;import com.aebiz.b2b2c.order.orderstaffmutual.vo.OrderStaffMutualModel;import com.aebiz.b2b2c.servicestaff.servicestaff.service.ServicestaffService;import com.aebiz.b2b2c.servicestaff.servicestaff.vo.ServicestaffModel;import com.aebiz.b2b2c.servicestaff.servicestaffcomb.service.ServicestaffcombService;import com.aebiz.b2b2c.servicestaff.servicestaffcomb.vo.ServicestaffcombModel;import com.aebiz.b2b2c.servicestaff.servicestaffcomb.vo.ServicestaffcombQueryModel;import com.aebiz.b2b2c.servicestaff.servicestaffinfo.service.ServicestaffinfoService;import com.aebiz.b2b2c.servicestaff.servicestaffinfo.vo.EducationDegreeEnum;import com.aebiz.b2b2c.servicestaff.servicestaffinfo.vo.ServicestaffinfoModel;import com.aebiz.b2b2c.servicestaff.servicestaffinterview.service.ServicestaffinterviewService;import com.aebiz.b2b2c.servicestaff.servicestafflevel.service.ServicestafflevelService;*//** * 家政人员系统多模块复合控制器 *  * @author hedongfei * o *//*@Controller("UCServicestaffcombController")@RequestMapping("/usercenter/servicestaffcomb")public class ServicestaffcombController extendsBaseController<ServicestaffcombModel,ServicestaffcombQueryModel>  {	// 家政员登录失败次数	public static final String SERVICESTAFFLOGINERRORTIME = "SERVICESTAFFLOGINERRORTIME";// 放到cookies中的key	// 登录时的验证码	public static final String SERVICESTAFFLOGINCODEKEY = "SERVICESTAFFLOGINCODEKEY";// 放到cookies中的key	@Autowired	private org.apache.shiro.mgt.SecurityManager sm = null;			public ServicestaffcombController() {		super("/servicestaff/sysback/servicestaffcomb","Servicestaffcomb", ServicestaffcombController.class);	}	 复合service 	private ServicestaffcombService myService;		@Autowired	public void setMyService(ServicestaffcombService bs) {		this.myService = bs;		super.setBs(bs);	}			@Autowired	private UuidService us;		 家政员信息信息service 	@Autowired	private ServicestaffService servicestaffService;	 家政员基础信息service	@Autowired	private ServicestaffinfoService  servicestaffinfoService;	 平台家政员等级信息service 	@Autowired	private ServicestafflevelService servicestafflevelService;	 平台家政员等级信息service 	@Autowired	private ServicestaffinterviewService servicestaffinterviewService;		 订单和家政员关联表service 	@Autowired	private OrderStaffService orderStaffService;		主订单service	@Autowired	private OrderMainService orderMainService;		订单详细service	@Autowired	private OrderDetailService orderDetailService;			家政员互评service	@Autowired	private OrderStaffMutualService orderStaffMutualService;		*//**	 * 消息	 *//*	@Autowired	private InnerMessageNoticeService innerMessageNoticeService ;		@Autowired	private OrderMainAddressService orderAddressService;		注入城市service	@Autowired	private CityService cityService;			*//**	 * 进入pc端--家政员个人设置页面	 * hedongfei	 * @param model	 * @param request	 *//*	@RequestMapping(value = { "/toPersonalSettings" }, method = { RequestMethod.GET })	public String toPersonalSettings(Model model, HttpServletRequest request){				// 获取当前登陆的家政员的uuid		String servicestaffuuid = LoginUserHelper.getStoreLoginUserUuid();		if(StringUtil.isEmpty(servicestaffuuid)){			return "redirect:toLogin";		}				ServicestaffcombModel servicestaffcombModel = myService				.getServicestaffcombModel(servicestaffuuid);				preparedUpdateData(model, request);				model.addAttribute("m", servicestaffcombModel );				//		model.addAttribute("personalset", "true" );				return "servicestaff/servicestaffcenter/servicestaff/PersonalSettings";	}			*//**	 *pc端--个人设置页面----保存	 * 	 * @param model	 * @param m	 * @param request	 * @return	 *//*	@RequestMapping(value = { "/updateServicestaffcombModel" }, method = { RequestMethod.POST })	public String updateServicestaffcombModel(Model model,			@ModelAttribute("m") ServicestaffcombModel m, HttpServletRequest request,@RequestParam(value = "imgFile", required = false) MultipartFile[] files) {		// 将mapErrorMsg清空		this.getMapErrorMsg().clear();		cleanQuerySession(request);		String sex=request.getParameter("sex");		m.getServicestaffinfoModel().setSex(sex);		servicestaffinfoService.updateServicestaffinfo(m, files);		//家政员		servicestaffService.update(m.getServicestaffModel());		preparedUpdateData(model, request);		//return "servicestaff/servicestaffcenter/servicestaff/PersonalSettings";		return "redirect:toPersonalSettings";	}		*//**	 * 进入pc端--家政员评价管理页面	 * hedongfei	 * @param model	 * @param request	 *//*	@RequestMapping(value = { "/toEvaluationManagement/{nowPage}/{pageShow}" }, method = { RequestMethod.GET })	public String toEvaluationManagement(@ModelAttribute("wm") BaseWebModel wm,Model model, HttpServletRequest request){		// 获取当前登陆的家政员的uuid		 String servicestaffuuid = LoginUserHelper.getStoreLoginUserUuid();		 if(StringUtil.isEmpty(servicestaffuuid)){			 return "redirect:toLogin";		 }		//通过家政人员编号來獲取家政員订单编号列表		List<String> orderuuids=orderStaffService.getOrderStaffsModelByServiceUserId(servicestaffuuid);				//通过家政人员编号來獲取家政員订单分页数据		List<String> orderuuidsCount=orderStaffService.getOrderStaffsModelByServiceUserIdandmore(servicestaffuuid, "11", 0,0);		//wm.setTotalNum(orderuuidsCount.size()); 		if(orderuuidsCount!=null){		     wm.setTotalNum(orderuuidsCount.size()); 		}else{						wm.setTotalNum(0);		}				int pageCount =wm.getPageShow();		int pageNo = wm.getNowPage();			 		//通过家政人员编号來獲取家政員订单编号列表		List<String> orderuuids=orderStaffService.getOrderStaffsModelByServiceUserIdandmore(servicestaffuuid, "11", pageNo,pageCount);			  		 		 		//创建个List用来存放数据		List<OrderMainModel> oms=new ArrayList();		  if(orderuuids!=null && orderuuids.size() > 0){			for (int i=0;i<orderuuids.size();i++) {				 String orderuuid=orderuuids.get(i);				 //根据uuid获取主订单对象				 OrderMainModel om =orderMainService.getByUuid(orderuuid);				//判断主订单对象				 if(om!=null){					 om.setServicestaffuuid(servicestaffuuid);					 oms.add(om);					 }else{					 				 }			 }		   }				  		  model.addAttribute("order",oms);		  		  //家政员中心左侧选中使用		  model.addAttribute("evaluation","true");		  		return "servicestaff/servicestaffcenter/servicestaff/EvaluationManagement";	}				*//**	 *家政员评价管理页面--提交评价方法	 * hedongfei	 * @param model	 * @param request	 *//*	@RequestMapping(value = { "/toAddOrderstaffmutual" }, method = { RequestMethod.GET })	@ResponseBody	public String toAddOrderstaffmutual(			@RequestParam("orderstaffmutuals") String orderstaffmutuals,Model model, HttpServletRequest request){				 String servicestaffuuid = LoginUserHelper.getStoreLoginUserUuid();		 if(StringUtil.isEmpty(servicestaffuuid)){			 return "redirect:toLogin";		 }		//页面所传的互评所需信息，将其按照条件拆分为数组		String[] orderstaffmutual=orderstaffmutuals.split(",");				//创建个List用来存放数据		List mutuallist = new ArrayList();				//创建个String[]用来存放数据		String[] orderstaffmutualinfodetail=null;				for(int i=0;i<orderstaffmutual.length;i++){						String orderstaffmutualinfo=orderstaffmutual[i];						orderstaffmutualinfodetail=orderstaffmutualinfo.split("-");						mutuallist.add(orderstaffmutualinfodetail);		}				if(mutuallist!=null && mutuallist.size() > 0){			for(int j=0;j<mutuallist.size();j++){				String[] osminfodetail=(String[]) mutuallist.get(j);							//家政员互评表				OrderStaffMutualModel orderStaffMutualModel=new OrderStaffMutualModel();								//订单uuid				orderStaffMutualModel.setOrderMainUuid(osminfodetail[0]);								//互评评分数				orderStaffMutualModel.setScore(osminfodetail[1]);								//被评家政员uuid				orderStaffMutualModel.setByServiceStaffUuid(osminfodetail[2]);								//家政员uuid  注意：因为登录帮助类暂时无法使用，故将其写死				orderStaffMutualModel.setServiceStaffUuid(servicestaffuuid);								orderStaffMutualService.create(orderStaffMutualModel);								 //修改主订单互评状态				OrderMainModel om =orderMainService.getByUuid(osminfodetail[0]);				om.setMutualState("1");				orderMainService.update(om);			}		 }				return "success";	}			*//**	 * 将会员的教育程度发送到会员编辑页面展示	 * 	 * @param model	 *//*	private void sendEducationShowName(Model model) {		List<DataTablesPageParam> educationList = new ArrayList<DataTablesPageParam>();		for (EducationDegreeEnum ed : EducationDegreeEnum.values()) {			DataTablesPageParam dpp = new DataTablesPageParam();			dpp.setName(ed.getKey());			dpp.setValue(ed.getValue());			educationList.add(dpp);		}		model.addAttribute("educationList", educationList);	}				*//**	 * 获取会员平台等级	 *//*	@Override	protected void preparedUpdateData(Model model, HttpServletRequest request) {				// 会员学历展示数据		sendEducationShowName(model);		}								*//**	 * 进入--加入我们页面	 * hedongfei	 * @param model	 * @param request	 *//*	@RequestMapping(value = { "/toJoinUs" }, method = { RequestMethod.GET })	public String toJoinUs(Model model, HttpServletRequest request){		model.addAttribute("JoinUs", "true");		preparedUpdateData(model, request);				return "servicestaff/servicestaffcenter/servicestaff/JoinUs";	}		*//**	 * 加入我们--提交申请	 * hedongfei	 *//*	@RequestMapping(value = { "/addApplyInfo" }, method = { RequestMethod.POST })	public String addApplyInfo(Model model,			@ModelAttribute("m") ServicestaffcombModel m, HttpServletRequest request,@RequestParam(value = "imgFile", required = false) MultipartFile[] files) {				this.getMapErrorMsg().clear();				// 添加家政人员信息		ServicestaffModel sm =  m.getServicestaffModel();		sm.setCreateTime(DateFormatHelper.getNowTimeStr());		sm.setFrozenSate("2");		//换字段了		sm.setSate("0");		//收入		sm.setAccountAmount(0.0);		servicestaffService.create(sm);				// 添加家政人员基础信息				//String ServicestaffModelUuid = sm.getUuid();		//ServicestaffinfoModel servicestaffinfoModel = m.getServicestaffinfoModel();		//servicestaffinfoModel.setServiceStaffUuid(ServicestaffModelUuid);		//servicestaffinfoService.create(servicestaffinfoModel);							servicestaffinfoService.updateServicestaffinfo(m, files);				return "servicestaff/servicestaffcenter/servicestaff/ApplySuccess";	}			*//**	 * 进入---个人中心页面	 * hedongfei	 * @param model	 * @param request	 *//*	@RequestMapping(value = { "/toPersonalCenter" }, method = { RequestMethod.GET })	public String toPersonalCenter(Model model, HttpServletRequest request){        // 获取当前登陆的家政员的uuid        String servicestaffuuid = LoginUserHelper.getStoreLoginUserUuid();        if(StringUtil.isEmpty(servicestaffuuid)){        	return "redirect:toLogin";        }        		//通过家政人员编号來獲取家政員订单编号列表		List<String> orderuuids=orderStaffService.getOrderStaffsModelByServiceUserIdandmore(servicestaffuuid, "", 1, 4);		//创建个List用来存放数据		List<OrderMainModel> oms=new ArrayList();				if(orderuuids!=null && orderuuids.size() > 0){			for (int i=0;i<orderuuids.size();i++) {			  String orderuuid=orderuuids.get(i);			  //根据uuid获取主订单对象			  OrderMainModel om =orderMainService.getByUuid(orderuuid);			  om.setServicestaffuuid(servicestaffuuid);			  oms.add(om);				}		}					//消息		List<InnerMessageNoticeModel>  msgList = innerMessageNoticeService.getByUserId(servicestaffuuid, 3, 1);	  		//家政员表		ServicestaffModel servicestaffModel=servicestaffService.getByUuid(servicestaffuuid);        //家政员服务次数  注：每一份完成的订单算一次服务		int serveNumber=orderStaffService.getServeNumber(servicestaffuuid);	 				  		  		model.addAttribute("order",oms);        		model.addAttribute("msgList", msgList);				model.addAttribute("servicestaffModel", servicestaffModel);				model.addAttribute("serveNumber", serveNumber);		model.addAttribute("scenter", "true");		return "servicestaff/servicestaffcenter/servicestaff/PersonalCenter";	}		*//**	 * 跳转到家政员登录页面	 * @return	 *//*	@RequestMapping(value = "/toLogin", method = RequestMethod.GET)	public String toLogin(HttpServletRequest request,			HttpServletResponse response) {		Cookie[] cookies = request.getCookies();		if (cookies != null) {			for (Cookie cookie : cookies) {				if (cookie.getName().equals("servicestaffLoginNameAndPassword")) {					String servicestaffLoginNameAndPassword = cookie.getValue();					// 获取用户名和密码					if (!StringUtil.isEmpty(servicestaffLoginNameAndPassword)) {						String[] v = servicestaffLoginNameAndPassword.split(",");						request.setAttribute("loginName", v[0]);						request.setAttribute("pwd", v[1]);						request.setAttribute("remember", "on");					}				}				if (ServicestaffcombController.SERVICESTAFFLOGINERRORTIME.equals(cookie.getName())) {					int cookiesErrorTime = 0;					// 如果已经存在当前登录的用户的cookies					String value = cookie.getValue();					String[] v = value.split(",");					// 第四个为错误登录次数					cookiesErrorTime = Integer.parseInt(v[3]);					// 如果失败次数大于3次,则再次登陆时需要输入验证码,如果小于3则还需要再去数据库里查看错误登陆次数					if (cookiesErrorTime >= 3) {						// 则再次登陆时需要输入验证码,						request.setAttribute("hasVilidateCode", "true");					} else {						// 如果数据的错误次数小于3,等有可能是恶意更改了cookies,这个时候要以数据库的为准						if (!StringUtil.isEmpty(v[0])) {							// 根据会员输入的用户名来查找会员							ServicestaffModel serviceStaff = servicestaffService.getServicestaffByLoginNameOrMobileOrEmail(v[0]);												if (serviceStaff != null) {								int dbWrongTime = Integer.valueOf(serviceStaff.getLoginErrorTimes());								if (dbWrongTime < 3) {									request.setAttribute("hasVilidateCode",											"false");								}							}						}					}				}			}		}		return "servicestaff/servicestaffcenter/servicestaff/staffLogin";	}	*//**	 * 家政员登录	 * @param userName  用户名	 * @param password  密码	 * @param model	 * @param request	 * @return	 *//*	@RequestMapping(value = "/login", method = RequestMethod.POST)	public String login(@RequestParam("loginName") String loginName,			@RequestParam("pwd") String pwd,			@RequestParam("hasVilidateCode") String hasVilidateCode,			HttpServletRequest request, HttpServletResponse response) {		if (StringUtil.isEmpty(loginName)) {			request.setAttribute("Error_Msg", MessageHelper.getMessage("customer.login.customerNameIsEmpty"));			request.setAttribute("loginName", loginName);			return "servicestaff/servicestaffcenter/servicestaff/staffLogin";		}		if (StringUtil.isEmpty(pwd)) {			request.setAttribute("Error_Msg",MessageHelper.getMessage("customer.login.passwordIsEmpty"));			request.setAttribute("loginName", loginName);			return "servicestaff/servicestaffcenter/servicestaff/staffLogin";		}		// 如果是需要验证码的,需要验证验证码		if (hasVilidateCode.equals("true")) {			String validateCode = request.getParameter("validateCode");			Cookie[] cookies = request.getCookies();			String code = "";			for (Cookie cookie : cookies) {				if (ServicestaffcombController.SERVICESTAFFLOGINCODEKEY.equals(cookie.getName())) {					code = cookie.getValue();				}			}			// 验证码不能为空			if (StringUtil.isEmpty(validateCode)) {				request.setAttribute("Error_Msg",MessageHelper.getMessage("customerregister.verificationCode.isEmpty"));				request.setAttribute("loginName", loginName);				request.setAttribute("hasVilidateCode", "true");				return "servicestaff/servicestaffcenter/servicestaff/staffLogin";				// 验证码不正确和cooikes里的不一致			} else if (!validateCode.equalsIgnoreCase(code)) {				request.setAttribute("Error_Msg", MessageHelper						.getMessage("customerregister.verificationCodeError"));				request.setAttribute("loginName", loginName);				request.setAttribute("validateCode", validateCode);				request.setAttribute("hasVilidateCode", "true");				return "servicestaff/servicestaffcenter/servicestaff/staffLogin";			}		}		SecurityUtils.setSecurityManager(sm);		String type = request.getParameter("type");		UsernamePasswordToken token = new UsernamePasswordToken(type + ","				+ loginName, pwd);		token.setRememberMe(true);		Subject currentCustomer = SecurityUtils.getSubject();		// 根据会员输入的用户名来查找会员		ServicestaffModel serviceStaff = servicestaffService.getServicestaffByLoginNameOrMobileOrEmail(loginName);		if(serviceStaff == null){			request.setAttribute("Error_Msg",MessageHelper.getMessage("login.failed"));			request.setAttribute("loginName", loginName);			return "servicestaff/servicestaffcenter/servicestaff/staffLogin";		}		// 最大输入的错误密码数		String times = websiteOperateInteractive.getValueByKey(LoginMaxErrorTimeConst.CUSTOMER_MAX_LOGIN_ERROR);				int errortime = Integer.parseInt(times);		//会员登录错误次数		int loginErrorTimes = Integer.valueOf(serviceStaff.getLoginErrorTimes()) ;		// 如果登录的次数超过限定次数次了,即使帐号密码是正确的,也会提示超过限定次数或者找回密码		if (serviceStaff != null && loginErrorTimes >= errortime) {			//最后错误登录时间			Date lastLoginErrorTime = DateFormatHelper.toDate(serviceStaff.getLastWrongLoginTime()); 			//20分钟后			Date after20Time =  DateUtil.addMinute(lastLoginErrorTime, 20);						Long minutes = DateUtil.timesBetween(DateUtil.toSqlTimestamp(DateFormatHelper.getTimeStr(after20Time), DateUtil.DATE_FORMAT_DATETIME),DateUtil.toSqlTimestamp( DateFormatHelper.getNowTimeStr(), DateUtil.DATE_FORMAT_DATETIME), DateUtil.MINUTE_MILLI);			if(minutes<0){				String minu= String.valueOf(Math.abs(minutes)) ;				request.setAttribute("loginName", loginName);				request.setAttribute("hasVilidateCode", "true");				// 找回密码的url				String[] p = new String[] { times,minu };				request.setAttribute("Error_Msg","");				request.setAttribute("More_Error_Msg",MessageHelper.getMessage("login.moreTimes", p));				return "servicestaff/servicestaffcenter/servicestaff/staffLogin";			}else{				//登录错误次数设置重置为0				serviceStaff.setLoginErrorTimes("0");				servicestaffService.update(serviceStaff);			}					}		try {			currentCustomer.login(token);			//判断是否冻结			if(serviceStaff != null){				if(ServicestaffModel.SERVICESTAFF_FROZENSATE_FROZENED.equals(serviceStaff.getSate())){					request.setAttribute("Error_Msg",MessageHelper.getMessage("servicestaff.login.frozened"));					request.setAttribute("loginName", loginName);					return "servicestaff/servicestaffcenter/servicestaff/staffLogin";				}			}			//登录错误次数设置重置为0			serviceStaff.setLoginErrorTimes("0");			servicestaffService.update(serviceStaff);			// 把cookies失败的次数置为0			Cookie[] cookies = request.getCookies();			for (Cookie cookie : cookies) {				if (ServicestaffcombController.SERVICESTAFFLOGINERRORTIME.equals(cookie.getName())) {					String value = cookie.getValue();					String[] v = value.split(",");					cookie.setValue(v[0] + "," + v[1] + "," + v[2] + ",0");					// 有效时间为30天					cookie.setMaxAge(30 * 24 * 60 * 60);					cookie.setPath("/");					response.addCookie(cookie);				}			}		} catch (Exception err) {			err.printStackTrace();			request.setAttribute("Error_Msg",MessageHelper.getMessage("login.failed"));			// 登录失败时,做的cookies失败次数和数据库登录失败次数的操作,来判定是否需要输入验证码			this.doError(serviceStaff, loginName, request, response);			request.setAttribute("loginName", loginName);			return "servicestaff/servicestaffcenter/servicestaff/staffLogin";		}		if (serviceStaff != null) {  			currentCustomer.getSession().setAttribute(					LoginUserHelper.LOGIN_STORE, serviceStaff);			// 如果记住我，则加cookies			String remember = request.getParameter("remember");			if ("on".equals(remember)) {				// 把用户名和密码				Cookie customerLoginNameCookies = new Cookie(						"servicestaffLoginNameAndPassword", loginName + "," + pwd);				// 有效时间为30天				customerLoginNameCookies.setMaxAge(30 * 24 * 60 * 60);				customerLoginNameCookies.setPath("/");				response.addCookie(customerLoginNameCookies);			} else {				// 把cookies里的用户名密码清空				// 把用户名和密码				Cookie customerLoginNameCookies = new Cookie("servicestaffLoginNameAndPassword", "");				// 立即删除cookies				customerLoginNameCookies.setMaxAge(0);				customerLoginNameCookies.setPath("/");				response.addCookie(customerLoginNameCookies);			}		}		// 重定向到根目录		return "redirect:toPersonalSettings";	}			*//**	 * 当登录失败时做的操作	 * 	 * @param customer	 * @param loginName	 * @param request	 * @param response	 *            void	 *//*	private boolean doError(ServicestaffModel servicestaff, String loginName,			HttpServletRequest request, HttpServletResponse response) {		// 最大输入的错误密码数		//String times = websiteOperateInteractive.getValueByKey(LoginMaxErrorTimeConst.CUSTOMER_MAX_LOGIN_ERROR);		String times = "5";		int errortime = Integer.parseInt(times);		// 找回密码的url		// 数据库的登录失败次数+1		if (servicestaff != null) {			int dbErrorTime = Integer.valueOf(servicestaff.getLoginErrorTimes());			dbErrorTime = dbErrorTime + 1;			servicestaff.setLoginErrorTimes(String.valueOf(dbErrorTime));			servicestaff.setLastWrongLoginTime(DateFormatHelper.getNowTimeStr());			servicestaffService.updateLoginErrorTimes(servicestaff);			Cookie[] cookies = request.getCookies();			if (cookies != null) {				int i = 0;				for (Cookie cookie : cookies) {					if (ServicestaffcombController.SERVICESTAFFLOGINERRORTIME.equals(cookie.getName())) {						i = 1;					}				}				if (i == 0) {					String value = loginName + "," + loginName + ","							+ loginName + ",1";					// 有效时间为30天					Cookie cookie = new Cookie(	ServicestaffcombController.SERVICESTAFFLOGINERRORTIME,value);					cookie.setMaxAge(30 * 24 * 60 * 60);					cookie.setPath("/");					response.addCookie(cookie);				}				for (Cookie cookie : cookies) {					// 获取登录失败次数,如果还没有cookies 则去数据库进行比较					if (ServicestaffcombController.SERVICESTAFFLOGINERRORTIME.equals(cookie.getName())) {						int cookiesErrorTime = 0;						// 如果已经存在当前登录的用户的cookies						if (cookie.getValue().indexOf(loginName) > -1) {							String value = cookie.getValue();							String[] v = value.split(",");							// 第四个为错误登录次数							cookiesErrorTime = Integer.parseInt(v[3]);							// 登录失败次数+1							cookiesErrorTime = cookiesErrorTime + 1;							cookie.setValue(servicestaff.getServiceStaffName() + ","									+ servicestaff.getMobile() + ","									+ servicestaff.getEmail() + ","									+ cookiesErrorTime + "");							// 有效时间为30天							cookie.setMaxAge(30 * 24 * 60 * 60);							cookie.setPath("/");							response.addCookie(cookie);							// 如果失败次数大于3次,则再次登陆时需要输入验证码,如果小于3则还需要再去数据库里查看错误登陆次数							if (cookiesErrorTime >= 3									&& cookiesErrorTime < errortime) {								// 则再次登陆时需要输入验证码,								request.setAttribute("hasVilidateCode", "true");								return true;							} else if (cookiesErrorTime >= errortime) {								// 最大输入的错误密码数								String[] p = new String[] { times };								request.setAttribute("More_Error_Msg",										MessageHelper.getMessage(												"login.moreTimes", p));							} else {								// 如果数据的错误次数小于3,等有可能是恶意更改了cookies,这个时候要以数据库的为准								int dbWrongTime = Integer.valueOf(servicestaff.getLoginErrorTimes());								if (dbWrongTime < 3) {									request.setAttribute("hasVilidateCode",											"false");									request.setAttribute("More_Error_Msg", "");								}							}						}					} else {						int dbWrongTime = Integer.valueOf(servicestaff.getLoginErrorTimes());						if (dbWrongTime >= 3 && dbWrongTime < errortime) {							request.setAttribute("hasVilidateCode", "true");						} else if (dbWrongTime >= errortime) {							request.setAttribute("hasVilidateCode", "true");							String[] p = new String[] { times };							request.setAttribute("More_Error_Msg",									MessageHelper.getMessage("login.moreTimes",											p));							return true;						}					}				}			}		}		return false;	}		*//**	 * 退出登录	 * 	 * @return String	 *//*	@RequestMapping(value = "/logout", method = RequestMethod.GET)	public String logout() {		Subject currentUser = SecurityUtils.getSubject();		currentUser.logout();		return "redirect:toLogin";	}		*//**	 * 进入---个人中心页面--跳转订单详情页面	 * hedongfei	 * @param model	 * @param request	 *//*	@RequestMapping(value = { "/toOrderDetail/{uuid}" }, method = { RequestMethod.GET })	public String toOrderDetail(@PathVariable("uuid") String uuid,Model model, HttpServletRequest request){		 // 获取当前登陆的家政员的uuid		 String servicestaffuuid = LoginUserHelper.getStoreLoginUserUuid();		 if(StringUtil.isEmpty(servicestaffuuid)){			 return "redirect:toLogin";		 }		//根据uuid获取主订单对象		OrderMainModel om =orderMainService.getByUuid(uuid);				om.setServicestaffuuid(servicestaffuuid);				OrderMainAddressModel orderMAM = (OrderMainAddressModel) orderAddressService.getOrderMainAddressModelByUuid(om.getUuid());		CustomerAddressModel customerAddress = customerAddressService.getByUuid(orderMAM.getAddress());				if(customerAddress != null){			//通过地址uuid获得地址信息			String city = cityService.getCityNameById(customerAddress.getCity());			String region = customerAddress.getRegion();			String community = customerAddress.getCommunity();			String address = customerAddress.getAddress();						model.addAttribute("serviceAddress", city+region+community+address);//服务地址  orderMAM.getAddress()		}						String orderdetailAddress=orderMAM.getAddressDetail();		model.addAttribute("serviceAddress",orderdetailAddress);				model.addAttribute("order",om);				return "servicestaff/servicestaffcenter/servicestaff/OrderDetail";	}		*//**	 * 前台页面--个人设置--修改密码----点击保存时校验是否密码一致并且保存	 * @param model	 * @param request	 * @param response	 * hedongfei	 *//*	@RequestMapping(value = "/checkpasswordAndSave", method = { RequestMethod.GET })	@ResponseBody	public String checkpasswordAndSave(@RequestParam("password") String password,			@RequestParam("newpassword") String newpassword,			@RequestParam("sureNewPassword") String sureNewPassword,			Model model,HttpServletRequest request,HttpServletResponse response) {				// 获取当前登陆的家政员的uuid		 String servicestaffuuid = LoginUserHelper.getStoreLoginUserUuid();		 if(StringUtil.isEmpty(servicestaffuuid)){			 return "redirect:toLogin";		 }		 		 ServicestaffModel stfm = servicestaffService.getByUuid(servicestaffuuid);		 		 String  password1=stfm.getPassword();		 		 if(password1!=null){		   if(newpassword!=""||sureNewPassword!=""){  			if(password.equals(password1)){				if(newpassword.equals(sureNewPassword)){						stfm.setPassword(newpassword);						 						stfm.setPassword(newpassword);						 						servicestaffService.update(stfm);						 //修改成功						return "true";					}else{						//密码与确认密码不一致						return "false4";						}																				}else{						//旧密码与数据库不一致						return "false3";						}			   }else{				 //新密码与确认密码均不可为空				return "false2";				   			   }			}else{					//数据库没有密码					return "false1";						}							}	}*/