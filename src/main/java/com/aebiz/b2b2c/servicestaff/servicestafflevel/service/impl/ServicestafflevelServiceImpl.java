package com.aebiz.b2b2c.servicestaff.servicestafflevel.service.impl;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.multipart.MultipartFile;import com.aebiz.b2b2c.baseframework.basecrud.service.BaseServiceImpl;import com.aebiz.b2b2c.baseframework.basecrud.vo.BaseModel;import com.aebiz.b2b2c.baseframework.filemgr.helper.FileUploadHelper;import com.aebiz.b2b2c.baseframework.utils.DateFormatHelper;import com.aebiz.b2b2c.baseframework.utils.LoginUserHelper;import com.aebiz.b2b2c.baseframework.utils.StringUtil;import com.aebiz.b2b2c.baseframework.uuidservice.service.UuidService;import com.aebiz.b2b2c.servicestaff.servicestafflevel.dao.ServicestafflevelDAO;import com.aebiz.b2b2c.servicestaff.servicestafflevel.service.ServicestafflevelService;import com.aebiz.b2b2c.servicestaff.servicestafflevel.vo.ServicestafflevelModel;import com.aebiz.b2b2c.servicestaff.servicestafflevel.vo.ServicestafflevelQueryModel;@Service@Transactionalpublic class ServicestafflevelServiceImpl extends		BaseServiceImpl<ServicestafflevelModel, ServicestafflevelQueryModel>		implements ServicestafflevelService {	private ServicestafflevelDAO myDao = null;	@Autowired	private FileUploadHelper fileUpload = null;	@Autowired	private UuidService us;	@Autowired	public void setMyDao(ServicestafflevelDAO dao) {		this.myDao = dao;		super.setDao(dao);	}	@Override	public String create(ServicestafflevelModel m) {		m.setUuid(us.getNextUuid());		m.setDelFlag(BaseModel.DEL_FLAG_VALID);		m.setOper(LoginUserHelper.getLoginUserUuid());		m.setOpeTime(DateFormatHelper.getNowTimeStr());		String ret = super.create(m);		return ret;	}	@Override	public void update(ServicestafflevelModel m) {		m.setDelFlag(BaseModel.DEL_FLAG_VALID);		m.setOper(LoginUserHelper.getLoginUserUuid());		m.setOpeTime(DateFormatHelper.getNowTimeStr());		super.update(m);	}	@Override	public void delete(ServicestafflevelModel m) {		m.setDelFlag(BaseModel.DEL_FLAG_INVALID);		m.setOper(LoginUserHelper.getLoginUserUuid());		m.setOpeTime(DateFormatHelper.getNowTimeStr());		super.update(m);	}	/**	 * 文件上传	 * 	 * @param customerShopLevelModel	 * @param files	 * @return	 */	public ServicestafflevelModel uploadImage(ServicestafflevelModel m,			MultipartFile[] files) {		List<String> fileNameList = new ArrayList<String>();		List<MultipartFile> fileList = new ArrayList<MultipartFile>();		try {			if (files != null && files.length > 0) {				for (int i = 0; i < files.length; i++) {					String filePrefix = "shopLevelIcon"							+ new SimpleDateFormat("yyyyMMddHHmmss")									.format(new Date());					// 如果文件大小不为0					if (files[i].getSize() <= 0) {						continue;					}					String oldName = fileUpload.getFileName(files[i]);					String fileSuffix = this.getFileSuffix(oldName);					String newName = filePrefix + fileSuffix;					m.setLevelIcon(newName);					fileNameList.add(newName);					fileList.add(files[i]);				}			} else {				m.setLevelIcon("");			}		} catch (Exception ex) {			m.setLevelIcon("");		}		if (fileList != null && fileList.size() > 0) {			MultipartFile[] newFiles = new MultipartFile[fileList.size()];			String[] newFileNames = new String[fileList.size()];			for (int i = 0; i < fileList.size(); i++) {				newFileNames[i] = fileNameList.get(i);				newFiles[i] = fileList.get(i);			}			fileUpload.uploadFiles(newFiles, newFileNames);		}		return m;	}	/**	 * 得到文件后缀	 * 	 * @param fileName	 *            文件名	 * @return	 */	public String getFileSuffix(String fileName) {		if (StringUtil.isEmpty(fileName)) {			return "";		}		return fileName.substring(fileName.indexOf("."), fileName.length());	}	/**	 * 根据等级名称校验平台会员等级名称是否存在	 * 	 * @param levelName	 *            等级名称	 * @param uuid	 *            等级编号	 * @return	 */	public boolean checkLevelNameExist(String levelName, String uuid) {		return this.myDao.checkLevelNameExist(levelName, uuid);	}	/**	 * 根据服务人员等级排序是否存在	 * 	 * @param position	 *            等级排序	 * @param uuid	 *            登记编号	 * @return	 */	public boolean checkpositionExist(String position, String uuid) {		return this.myDao.checkpositionExist(position, uuid);	}	/**	 * 通过家政员等级获取家政员等级名称	 * 	 * @param serviceStaffLevel	 * @return	 */	public String getServiceStaffLevelName(String serviceStaffLevel) {		return myDao.getServiceStaffLevelName(serviceStaffLevel);	}	/**	 * 通过家政员表等级字段获取家政员等级表信息	 * 	 * @param serviceStaffLevel	 * @return	 */	public ServicestafflevelModel getServicestafflevelModelbyserviceStaffLevel(			String serviceStaffLevel) {		return myDao				.getServicestafflevelModelbyserviceStaffLevel(serviceStaffLevel);	}	/**	 * 得到服务人员等级model的集合	 * 	 * @return	 */	public List<ServicestafflevelModel> ServicestafflevelModelList() {		return myDao.ServicestafflevelModelList();	}	/**	 * 得到等级名称获取uuids	 * 	 * @return	 */	@Override	public List<String> getServicestafflevelModeluuids(String levelName) {		return myDao.getServicestafflevelModeluuids(levelName);	}}