package com.aebiz.b2b2c.servicestaff.servicestaffcomb.service.impl;import javax.annotation.Resource;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.multipart.MultipartFile;import com.aebiz.b2b2c.baseframework.basecrud.service.BaseServiceImpl;import com.aebiz.b2b2c.baseframework.utils.DateFormatHelper;import com.aebiz.b2b2c.baseframework.uuidservice.service.UuidService;import com.aebiz.b2b2c.order.accountkey.service.AccountKeyService;import com.aebiz.b2b2c.order.accountkey.vo.AccountKeyModel;import com.aebiz.b2b2c.servicestaff.servicestaff.service.ServicestaffService;import com.aebiz.b2b2c.servicestaff.servicestaff.vo.ServicestaffModel;import com.aebiz.b2b2c.servicestaff.servicestaffcomb.dao.ServicestaffcombDao;import com.aebiz.b2b2c.servicestaff.servicestaffcomb.service.ServicestaffcombService;import com.aebiz.b2b2c.servicestaff.servicestaffcomb.vo.ServicestaffcombModel;import com.aebiz.b2b2c.servicestaff.servicestaffcomb.vo.ServicestaffcombQueryModel;import com.aebiz.b2b2c.servicestaff.servicestaffinfo.service.ServicestaffinfoService;import com.aebiz.b2b2c.servicestaff.servicestaffinfo.vo.ServicestaffinfoModel;import com.aebiz.b2b2c.servicestaff.servicestafflevel.service.ServicestafflevelService;import com.aebiz.b2b2c.servicestaff.servicestafflevel.vo.ServicestafflevelModel;import com.hxq.mobile.common.service.ServiceStaffInfoService;import com.hxq.mobile.common.service.ServiceStaffService;@Service@Transactionalpublic class ServicestaffcombServiceImpl extends		BaseServiceImpl<ServicestaffcombModel, ServicestaffcombQueryModel>		implements ServicestaffcombService {	// 编号类型订单	public static final String NOTYPE_ORDER = "doctor";	private ServicestaffcombDao myDao = null;	@Autowired	private UuidService us;	/* 医生信息信息service */	@Autowired	private ServicestaffService servicestaffService;	/* 医生基础信息service */	@Autowired	private ServicestaffinfoService servicestaffinfoService;		/* 平台医生等级信息service */	@Autowired	private ServicestafflevelService servicestafflevelService;	@Autowired	private AccountKeyService accountKeyService;	public void setMyDao(ServicestaffcombDao myDao) {		this.myDao = myDao;		super.setDao(myDao);	}	/**	 * 添加医生	 */	public void createDoctor(ServicestaffcombModel m) {		// 添加医生信息		ServicestaffModel sm = m.getServicestaffModel();		sm.setCreateTime(DateFormatHelper.getNowTimeStr());		// 未冻结		sm.setFrozenSate(ServicestaffModel.SERVICESTAFF_FROZENSATE_UNFROZENED);		// 未审核		sm.setSate(ServicestaffModel.SERVICESTAFF_SATE_PASS);		// 收入		sm.setAccountAmount(0.0);		// 医生编号		sm.setDoctorNo(createDoctorNo());		servicestaffService.create(sm);	}	/**	 * 添加医生	 */	public void createServiceStaff(ServicestaffcombModel m) {		// 添加医生信息		ServicestaffModel sm = m.getServicestaffModel();		sm.setCreateTime(DateFormatHelper.getNowTimeStr());		// 未冻结		sm.setFrozenSate(ServicestaffModel.SERVICESTAFF_FROZENSATE_UNFROZENED);		// 未审核		sm.setSate(ServicestaffModel.SERVICESTAFF_SATE_PASS);		// 收入		sm.setAccountAmount(0.0);		servicestaffService.create(sm);		// 添加医生基础信息		this.createServicestaffinfo(m.getServicestaffModel());	}	/**	 * 将医生基础信息和医生信息关联	 * 	 * @param servicestaffModel	 */	private void createServicestaffinfo(ServicestaffModel servicestaffModel) {		String ServicestaffModelUuid = servicestaffModel.getUuid();		ServicestaffinfoModel servicestaffinfoModel = new ServicestaffinfoModel();		servicestaffinfoModel.setServiceStaffUuid(ServicestaffModelUuid);		servicestaffinfoService.create(servicestaffinfoModel);	}	/**	 * 将医生基础信息和医生信息关联	 * 	 * @param ServicestaffModel	 */	private void createServicestafflevel(ServicestaffModel ServicestaffModel) {		String serviceStaffLevel = ServicestaffModel.getServiceStaffLevel();		ServicestafflevelModel servicestafflevelModel = new ServicestafflevelModel();		servicestafflevelModel.setUuid(serviceStaffLevel);		servicestafflevelService.create(servicestafflevelModel);	}	/**	 * 通过会员编号获取复合model，医生基础信息和平台医生等级信息	 * 	 * @param uuid	 */	public ServicestaffcombModel getServicestaffcombModel(String uuid) {		ServicestaffcombModel servicestaffcombModel = new ServicestaffcombModel();		// 得到医生信息		ServicestaffModel servicestaffModel =servicestaffService.getServicestaffModelByUuid(uuid);		servicestaffcombModel.setServicestaffModel(servicestaffModel);		// 得到医生基础信息		ServicestaffinfoModel servicestaffinfoModel = servicestaffinfoService				.getServicestaffinfoModelByServicestaffUuid(uuid);		servicestaffcombModel.setServicestaffinfoModel(servicestaffinfoModel);		return servicestaffcombModel;	}	/**	 * 更新医生员账户信息	 * 	 * @param ServicestaffModel	 */	public void updateServiceStaffAccountInfo(			ServicestaffModel servicestaffModel) {		servicestaffService.update(servicestaffModel);	}	/**	 * 更新医生基础信息	 * 	 * @param customerInfoModel	 */	public void updateServicestaffBaseInfo(			ServicestaffcombModel customerCombModel, MultipartFile[] imgFiles,			MultipartFile[] imgFiles1) {		servicestaffinfoService				.updateServicestaffinfo(customerCombModel, imgFiles, imgFiles1);	}	/**	 * 根据传入的uuid改变冻结状态	 * 	 * @param	 */	public Boolean changefrozenSate(String uuid, String note) {		ServicestaffModel s = servicestaffService.getByUuid(uuid);		s.setFrozenSate("0");		s.setFrozenNote(note);		s.setFrozenTime(DateFormatHelper.getNowTimeStr());		servicestaffService.update(s);		return true;	}	/**	 * 根据传入的uuid改变审核状态	 * 	 * @param	 */	public Boolean changeauditSate(String uuid, String status, String note) {		ServicestaffModel s = servicestaffService.getByUuid(uuid);		s.setSate(status);		s.setAuditTime(DateFormatHelper.getNowTimeStr());		s.setAuditNote(note);		servicestaffService.update(s);		return true;	}	/**	 * 根据传入的uuid改变审核状态	 * 	 * @param	 */	public Boolean changecertificationSate(String uuid, String status,			String note) {		ServicestaffModel s = servicestaffService.getByUuid(uuid);		s.setCertificationTyp(status);		s.setCertificationTime(DateFormatHelper.getNowTimeStr());		s.setCertificationNote(note);		servicestaffService.update(s);		return true;	}	public Boolean changefrozenSate1(String uuid) {		ServicestaffModel s = servicestaffService.getByUuid(uuid);		s.setFrozenSate("4");		servicestaffService.update(s);		return true;	}	/**	 * 创建医生流水号	 * 	 * @return	 * @throws Exception	 */	public String createDoctorNo() {		String returnNo = "";		synchronized (NOTYPE_ORDER) {			// 日期			String dateStr = DateFormatHelper.getNowTimeStr().substring(0, 10);			String date = dateStr.replace("-", "");			int maxcount = getMaxCount();			if (maxcount == 1000000)				maxcount = 1;			// 保存订单流水号			AccountKeyModel accountKey = accountKeyService					.getAccountKeyModelById(NOTYPE_ORDER);			if (accountKey == null) {				accountKey = new AccountKeyModel();				accountKey.setId(NOTYPE_ORDER);				accountKey.setValue("1");				accountKeyService.create(accountKey);			} else {				accountKey.setValue(maxcount + "");				accountKeyService.update(accountKey);			}			// 生成订单号			String orderno = getId(maxcount + "", 4);			returnNo = date + orderno;			return returnNo;		}	}	/**	 * 返回最大数	 * 	 */	private int getMaxCount() {		try {			AccountKeyModel key = accountKeyService					.getAccountKeyModelById(NOTYPE_ORDER);			if (key != null) {				return Integer.parseInt(key.getValue()) + 1;			}		} catch (Exception ex) {			ex.printStackTrace();		}		return 1;	}	/**	 * 获取定长流水号	 * 	 * @param sno	 * @param length	 * @return	 */	public static String getId(String sno, int length) {		int zeronum = length - ((sno + "").length());		String returnSno = "";		for (int i = 0; i < zeronum; i++) {			returnSno = returnSno + "0";		}		returnSno = returnSno + sno;		return returnSno;	}}